
AT_COMMANDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fec  08003fec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ff4  08003ff4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  20000010  0800400c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a24  0800400c  00020a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e4c  00000000  00000000  0002c222  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e8  00000000  00000000  0002e070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002ea58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002666c  00000000  00000000  0002f338  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009172  00000000  00000000  000559a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8c8f  00000000  00000000  0005eb16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001477a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  00147820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003eb0 	.word	0x08003eb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003eb0 	.word	0x08003eb0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_Init+0x3c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <HAL_Init+0x3c>)
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ee:	2003      	movs	r0, #3
 80004f0:	f000 f95c 	bl	80007ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f80f 	bl	8000518 <HAL_InitTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e001      	b.n	800050a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000506:	f003 fa87 	bl	8003a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800050a:	79fb      	ldrb	r3, [r7, #7]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40022000 	.word	0x40022000

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <HAL_InitTick+0x68>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d022      	beq.n	8000572 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_InitTick+0x6c>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <HAL_InitTick+0x68>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000538:	fbb1 f3f3 	udiv	r3, r1, r3
 800053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f968 	bl	8000816 <HAL_SYSTICK_Config>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d10f      	bne.n	800056c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b0f      	cmp	r3, #15
 8000550:	d809      	bhi.n	8000566 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000552:	2200      	movs	r2, #0
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800055a:	f000 f932 	bl	80007c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <HAL_InitTick+0x70>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	e007      	b.n	8000576 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e004      	b.n	8000576 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e001      	b.n	8000576 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000004 	.word	0x20000004
 8000584:	2000000c 	.word	0x2000000c
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_IncTick+0x1c>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_IncTick+0x20>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4413      	add	r3, r2
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x1c>)
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000030 	.word	0x20000030
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000030 	.word	0x20000030

080005c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff ffee 	bl	80005b0 <HAL_GetTick>
 80005d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005e0:	d004      	beq.n	80005ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HAL_Delay+0x40>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ec:	bf00      	nop
 80005ee:	f7ff ffdf 	bl	80005b0 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d8f7      	bhi.n	80005ee <HAL_Delay+0x26>
  {
  }
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000004 	.word	0x20000004

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4907      	ldr	r1, [pc, #28]	; (80006a8 <__NVIC_EnableIRQ+0x38>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	; 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000778:	d301      	bcc.n	800077e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2301      	movs	r3, #1
 800077c:	e00f      	b.n	800079e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <SysTick_Config+0x40>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000786:	210f      	movs	r1, #15
 8000788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800078c:	f7ff ff8e 	bl	80006ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SysTick_Config+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <SysTick_Config+0x40>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010

080007ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff29 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007d4:	f7ff ff3e 	bl	8000654 <__NVIC_GetPriorityGrouping>
 80007d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	6978      	ldr	r0, [r7, #20]
 80007e0:	f7ff ff8e 	bl	8000700 <NVIC_EncodePriority>
 80007e4:	4602      	mov	r2, r0
 80007e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff5d 	bl	80006ac <__NVIC_SetPriority>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff31 	bl	8000670 <__NVIC_EnableIRQ>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffa2 	bl	8000768 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b02      	cmp	r3, #2
 8000844:	d005      	beq.n	8000852 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2204      	movs	r2, #4
 800084a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	e029      	b.n	80008a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f022 020e 	bic.w	r2, r2, #14
 8000860:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f022 0201 	bic.w	r2, r2, #1
 8000870:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f003 021c 	and.w	r2, r3, #28
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	2101      	movs	r1, #1
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2201      	movs	r2, #1
 800088a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	4798      	blx	r3
    }
  }
  return status;
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008be:	e17f      	b.n	8000bc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	2101      	movs	r1, #1
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	fa01 f303 	lsl.w	r3, r1, r3
 80008cc:	4013      	ands	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 8171 	beq.w	8000bba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d003      	beq.n	80008e8 <HAL_GPIO_Init+0x38>
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b12      	cmp	r3, #18
 80008e6:	d123      	bne.n	8000930 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	220f      	movs	r2, #15
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	691a      	ldr	r2, [r3, #16]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	08da      	lsrs	r2, r3, #3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3208      	adds	r2, #8
 800092a:	6939      	ldr	r1, [r7, #16]
 800092c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0203 	and.w	r2, r3, #3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d00b      	beq.n	8000984 <HAL_GPIO_Init+0xd4>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d007      	beq.n	8000984 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000978:	2b11      	cmp	r3, #17
 800097a:	d003      	beq.n	8000984 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b12      	cmp	r3, #18
 8000982:	d130      	bne.n	80009e6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ba:	2201      	movs	r2, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	f003 0201 	and.w	r2, r3, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d118      	bne.n	8000a24 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009f8:	2201      	movs	r2, #1
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	08db      	lsrs	r3, r3, #3
 8000a0e:	f003 0201 	and.w	r2, r3, #1
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2203      	movs	r2, #3
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f000 80ac 	beq.w	8000bba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b5e      	ldr	r3, [pc, #376]	; (8000bdc <HAL_GPIO_Init+0x32c>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	4a5d      	ldr	r2, [pc, #372]	; (8000bdc <HAL_GPIO_Init+0x32c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6e:	4b5b      	ldr	r3, [pc, #364]	; (8000bdc <HAL_GPIO_Init+0x32c>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a7a:	4a59      	ldr	r2, [pc, #356]	; (8000be0 <HAL_GPIO_Init+0x330>)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3302      	adds	r3, #2
 8000a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	220f      	movs	r2, #15
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aa4:	d025      	beq.n	8000af2 <HAL_GPIO_Init+0x242>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a4e      	ldr	r2, [pc, #312]	; (8000be4 <HAL_GPIO_Init+0x334>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d01f      	beq.n	8000aee <HAL_GPIO_Init+0x23e>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_GPIO_Init+0x338>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d019      	beq.n	8000aea <HAL_GPIO_Init+0x23a>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4c      	ldr	r2, [pc, #304]	; (8000bec <HAL_GPIO_Init+0x33c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d013      	beq.n	8000ae6 <HAL_GPIO_Init+0x236>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4b      	ldr	r2, [pc, #300]	; (8000bf0 <HAL_GPIO_Init+0x340>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d00d      	beq.n	8000ae2 <HAL_GPIO_Init+0x232>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4a      	ldr	r2, [pc, #296]	; (8000bf4 <HAL_GPIO_Init+0x344>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d007      	beq.n	8000ade <HAL_GPIO_Init+0x22e>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a49      	ldr	r2, [pc, #292]	; (8000bf8 <HAL_GPIO_Init+0x348>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_GPIO_Init+0x22a>
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	e00c      	b.n	8000af4 <HAL_GPIO_Init+0x244>
 8000ada:	2307      	movs	r3, #7
 8000adc:	e00a      	b.n	8000af4 <HAL_GPIO_Init+0x244>
 8000ade:	2305      	movs	r3, #5
 8000ae0:	e008      	b.n	8000af4 <HAL_GPIO_Init+0x244>
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x244>
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e004      	b.n	8000af4 <HAL_GPIO_Init+0x244>
 8000aea:	2302      	movs	r3, #2
 8000aec:	e002      	b.n	8000af4 <HAL_GPIO_Init+0x244>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <HAL_GPIO_Init+0x244>
 8000af2:	2300      	movs	r3, #0
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	f002 0203 	and.w	r2, r2, #3
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	4093      	lsls	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b04:	4936      	ldr	r1, [pc, #216]	; (8000be0 <HAL_GPIO_Init+0x330>)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b12:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <HAL_GPIO_Init+0x34c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <HAL_GPIO_Init+0x34c>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_GPIO_Init+0x34c>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b60:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <HAL_GPIO_Init+0x34c>)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <HAL_GPIO_Init+0x34c>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b8a:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <HAL_GPIO_Init+0x34c>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_GPIO_Init+0x34c>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_GPIO_Init+0x34c>)
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f47f ae78 	bne.w	80008c0 <HAL_GPIO_Init+0x10>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	371c      	adds	r7, #28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000c00 	.word	0x48000c00
 8000bf0:	48001000 	.word	0x48001000
 8000bf4:	48001400 	.word	0x48001400
 8000bf8:	48001800 	.word	0x48001800
 8000bfc:	40010400 	.word	0x40010400

08000c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c1c:	e002      	b.n	8000c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c48:	887a      	ldrh	r2, [r7, #2]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c50:	887a      	ldrh	r2, [r7, #2]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	619a      	str	r2, [r3, #24]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <HAL_PWREx_GetVoltageRange+0x18>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40007000 	.word	0x40007000

08000c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c8e:	d130      	bne.n	8000cf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c9c:	d038      	beq.n	8000d10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2232      	movs	r2, #50	; 0x32
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cba:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbe:	0c9b      	lsrs	r3, r3, #18
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc4:	e002      	b.n	8000ccc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd8:	d102      	bne.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f2      	bne.n	8000cc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cec:	d110      	bne.n	8000d10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e00f      	b.n	8000d12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfe:	d007      	beq.n	8000d10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d08:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40007000 	.word	0x40007000
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	431bde83 	.word	0x431bde83

08000d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e39d      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d3e:	4ba4      	ldr	r3, [pc, #656]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d48:	4ba1      	ldr	r3, [pc, #644]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 80e1 	beq.w	8000f22 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <HAL_RCC_OscConfig+0x4a>
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	2b0c      	cmp	r3, #12
 8000d6a:	f040 8088 	bne.w	8000e7e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	f040 8084 	bne.w	8000e7e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d76:	4b96      	ldr	r3, [pc, #600]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <HAL_RCC_OscConfig+0x62>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e375      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a1a      	ldr	r2, [r3, #32]
 8000d92:	4b8f      	ldr	r3, [pc, #572]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d004      	beq.n	8000da8 <HAL_RCC_OscConfig+0x7c>
 8000d9e:	4b8c      	ldr	r3, [pc, #560]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000da6:	e005      	b.n	8000db4 <HAL_RCC_OscConfig+0x88>
 8000da8:	4b89      	ldr	r3, [pc, #548]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d223      	bcs.n	8000e00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fd09 	bl	80017d4 <RCC_SetFlashLatencyFromMSIRange>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e356      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dcc:	4b80      	ldr	r3, [pc, #512]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a7f      	ldr	r2, [pc, #508]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b7d      	ldr	r3, [pc, #500]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	497a      	ldr	r1, [pc, #488]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dea:	4b79      	ldr	r3, [pc, #484]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	4975      	ldr	r1, [pc, #468]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	604b      	str	r3, [r1, #4]
 8000dfe:	e022      	b.n	8000e46 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e00:	4b73      	ldr	r3, [pc, #460]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a72      	ldr	r2, [pc, #456]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b70      	ldr	r3, [pc, #448]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	496d      	ldr	r1, [pc, #436]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1e:	4b6c      	ldr	r3, [pc, #432]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	4968      	ldr	r1, [pc, #416]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fccc 	bl	80017d4 <RCC_SetFlashLatencyFromMSIRange>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e319      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e46:	f000 fc03 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	4b60      	ldr	r3, [pc, #384]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	4a5f      	ldr	r2, [pc, #380]	; (8000fd4 <HAL_RCC_OscConfig+0x2a8>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	f003 031f 	and.w	r3, r3, #31
 8000e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e62:	4a5d      	ldr	r2, [pc, #372]	; (8000fd8 <HAL_RCC_OscConfig+0x2ac>)
 8000e64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e66:	4b5d      	ldr	r3, [pc, #372]	; (8000fdc <HAL_RCC_OscConfig+0x2b0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb54 	bl	8000518 <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d052      	beq.n	8000f20 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	e2fd      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d032      	beq.n	8000eec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e86:	4b52      	ldr	r3, [pc, #328]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e92:	f7ff fb8d 	bl	80005b0 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fb89 	bl	80005b0 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e2e6      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eac:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb8:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a44      	ldr	r2, [pc, #272]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	493f      	ldr	r1, [pc, #252]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	493a      	ldr	r1, [pc, #232]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	604b      	str	r3, [r1, #4]
 8000eea:	e01a      	b.n	8000f22 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000eec:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000ef2:	f023 0301 	bic.w	r3, r3, #1
 8000ef6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fb5a 	bl	80005b0 <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f00:	f7ff fb56 	bl	80005b0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e2b3      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1f0      	bne.n	8000f00 <HAL_RCC_OscConfig+0x1d4>
 8000f1e:	e000      	b.n	8000f22 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d074      	beq.n	8001018 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d005      	beq.n	8000f40 <HAL_RCC_OscConfig+0x214>
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2b0c      	cmp	r3, #12
 8000f38:	d10e      	bne.n	8000f58 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d10b      	bne.n	8000f58 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d064      	beq.n	8001016 <HAL_RCC_OscConfig+0x2ea>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d160      	bne.n	8001016 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e290      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d106      	bne.n	8000f70 <HAL_RCC_OscConfig+0x244>
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e01d      	b.n	8000fac <HAL_RCC_OscConfig+0x280>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x268>
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e00b      	b.n	8000fac <HAL_RCC_OscConfig+0x280>
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_RCC_OscConfig+0x2a4>)
 8000fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01c      	beq.n	8000fee <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fafc 	bl	80005b0 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fba:	e011      	b.n	8000fe0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff faf8 	bl	80005b0 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d90a      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e255      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	08003fa4 	.word	0x08003fa4
 8000fd8:	2000000c 	.word	0x2000000c
 8000fdc:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fe0:	4bae      	ldr	r3, [pc, #696]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0e7      	beq.n	8000fbc <HAL_RCC_OscConfig+0x290>
 8000fec:	e014      	b.n	8001018 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fee:	f7ff fadf 	bl	80005b0 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fadb 	bl	80005b0 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	; 0x64
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e238      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001008:	4ba4      	ldr	r3, [pc, #656]	; (800129c <HAL_RCC_OscConfig+0x570>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f0      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x2ca>
 8001014:	e000      	b.n	8001018 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001016:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d060      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2b04      	cmp	r3, #4
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x30a>
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b0c      	cmp	r3, #12
 800102e:	d119      	bne.n	8001064 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d116      	bne.n	8001064 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001036:	4b99      	ldr	r3, [pc, #612]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103e:	2b00      	cmp	r3, #0
 8001040:	d005      	beq.n	800104e <HAL_RCC_OscConfig+0x322>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e215      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104e:	4b93      	ldr	r3, [pc, #588]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	061b      	lsls	r3, r3, #24
 800105c:	498f      	ldr	r1, [pc, #572]	; (800129c <HAL_RCC_OscConfig+0x570>)
 800105e:	4313      	orrs	r3, r2
 8001060:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001062:	e040      	b.n	80010e6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d023      	beq.n	80010b4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106c:	4b8b      	ldr	r3, [pc, #556]	; (800129c <HAL_RCC_OscConfig+0x570>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a8a      	ldr	r2, [pc, #552]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	f7ff fa9a 	bl	80005b0 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001080:	f7ff fa96 	bl	80005b0 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1f3      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001092:	4b82      	ldr	r3, [pc, #520]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	4b7f      	ldr	r3, [pc, #508]	; (800129c <HAL_RCC_OscConfig+0x570>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	061b      	lsls	r3, r3, #24
 80010ac:	497b      	ldr	r1, [pc, #492]	; (800129c <HAL_RCC_OscConfig+0x570>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]
 80010b2:	e018      	b.n	80010e6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b4:	4b79      	ldr	r3, [pc, #484]	; (800129c <HAL_RCC_OscConfig+0x570>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a78      	ldr	r2, [pc, #480]	; (800129c <HAL_RCC_OscConfig+0x570>)
 80010ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fa76 	bl	80005b0 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fa72 	bl	80005b0 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e1cf      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010da:	4b70      	ldr	r3, [pc, #448]	; (800129c <HAL_RCC_OscConfig+0x570>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d03c      	beq.n	800116c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d01c      	beq.n	8001134 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fa:	4b68      	ldr	r3, [pc, #416]	; (800129c <HAL_RCC_OscConfig+0x570>)
 80010fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001100:	4a66      	ldr	r2, [pc, #408]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110a:	f7ff fa51 	bl	80005b0 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fa4d 	bl	80005b0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1aa      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001124:	4b5d      	ldr	r3, [pc, #372]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0ef      	beq.n	8001112 <HAL_RCC_OscConfig+0x3e6>
 8001132:	e01b      	b.n	800116c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113a:	4a58      	ldr	r2, [pc, #352]	; (800129c <HAL_RCC_OscConfig+0x570>)
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001144:	f7ff fa34 	bl	80005b0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fa30 	bl	80005b0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e18d      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800115e:	4b4f      	ldr	r3, [pc, #316]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1ef      	bne.n	800114c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80a5 	beq.w	80012c4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10d      	bne.n	80011a6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b44      	ldr	r3, [pc, #272]	; (800129c <HAL_RCC_OscConfig+0x570>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	4a43      	ldr	r2, [pc, #268]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6593      	str	r3, [r2, #88]	; 0x58
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a2:	2301      	movs	r3, #1
 80011a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a6:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <HAL_RCC_OscConfig+0x574>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d118      	bne.n	80011e4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_RCC_OscConfig+0x574>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a3a      	ldr	r2, [pc, #232]	; (80012a0 <HAL_RCC_OscConfig+0x574>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011be:	f7ff f9f7 	bl	80005b0 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c6:	f7ff f9f3 	bl	80005b0 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e150      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d8:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <HAL_RCC_OscConfig+0x574>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d108      	bne.n	80011fe <HAL_RCC_OscConfig+0x4d2>
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_RCC_OscConfig+0x570>)
 80011ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f2:	4a2a      	ldr	r2, [pc, #168]	; (800129c <HAL_RCC_OscConfig+0x570>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011fc:	e024      	b.n	8001248 <HAL_RCC_OscConfig+0x51c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b05      	cmp	r3, #5
 8001204:	d110      	bne.n	8001228 <HAL_RCC_OscConfig+0x4fc>
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120c:	4a23      	ldr	r2, [pc, #140]	; (800129c <HAL_RCC_OscConfig+0x570>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121c:	4a1f      	ldr	r2, [pc, #124]	; (800129c <HAL_RCC_OscConfig+0x570>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001226:	e00f      	b.n	8001248 <HAL_RCC_OscConfig+0x51c>
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_RCC_OscConfig+0x570>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122e:	4a1b      	ldr	r2, [pc, #108]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_RCC_OscConfig+0x570>)
 800123a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d016      	beq.n	800127e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001250:	f7ff f9ae 	bl	80005b0 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001256:	e00a      	b.n	800126e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001258:	f7ff f9aa 	bl	80005b0 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f241 3288 	movw	r2, #5000	; 0x1388
 8001266:	4293      	cmp	r3, r2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e105      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_RCC_OscConfig+0x570>)
 8001270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0ed      	beq.n	8001258 <HAL_RCC_OscConfig+0x52c>
 800127c:	e019      	b.n	80012b2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127e:	f7ff f997 	bl	80005b0 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001284:	e00e      	b.n	80012a4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7ff f993 	bl	80005b0 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	; 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d905      	bls.n	80012a4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e0ee      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
 800129c:	40021000 	.word	0x40021000
 80012a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a4:	4b77      	ldr	r3, [pc, #476]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1e9      	bne.n	8001286 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b8:	4b72      	ldr	r3, [pc, #456]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	4a71      	ldr	r2, [pc, #452]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80012be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80d5 	beq.w	8001478 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	f000 808e 	beq.w	80013f2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d15b      	bne.n	8001396 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012de:	4b69      	ldr	r3, [pc, #420]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a68      	ldr	r2, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80012e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff f961 	bl	80005b0 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff f95d 	bl	80005b0 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e0ba      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001304:	4b5f      	ldr	r3, [pc, #380]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f0      	bne.n	80012f2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001310:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_RCC_OscConfig+0x75c>)
 8001316:	4013      	ands	r3, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001320:	3a01      	subs	r2, #1
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	4311      	orrs	r1, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800132a:	0212      	lsls	r2, r2, #8
 800132c:	4311      	orrs	r1, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001332:	0852      	lsrs	r2, r2, #1
 8001334:	3a01      	subs	r2, #1
 8001336:	0552      	lsls	r2, r2, #21
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800133e:	0852      	lsrs	r2, r2, #1
 8001340:	3a01      	subs	r2, #1
 8001342:	0652      	lsls	r2, r2, #25
 8001344:	4311      	orrs	r1, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800134a:	0912      	lsrs	r2, r2, #4
 800134c:	0452      	lsls	r2, r2, #17
 800134e:	430a      	orrs	r2, r1
 8001350:	494c      	ldr	r1, [pc, #304]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 8001352:	4313      	orrs	r3, r2
 8001354:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001356:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a4a      	ldr	r2, [pc, #296]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 800135c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001360:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001362:	4b48      	ldr	r3, [pc, #288]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 8001368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff f91f 	bl	80005b0 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff f91b 	bl	80005b0 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e078      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001388:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x64a>
 8001394:	e070      	b.n	8001478 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a3a      	ldr	r2, [pc, #232]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 800139c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013ae:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	4a34      	ldr	r2, [pc, #208]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80013b4:	f023 0303 	bic.w	r3, r3, #3
 80013b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	4a31      	ldr	r2, [pc, #196]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80013c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff f8f1 	bl	80005b0 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff f8ed 	bl	80005b0 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e04a      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x6a6>
 80013f0:	e042      	b.n	8001478 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e03d      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_RCC_OscConfig+0x758>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0203 	and.w	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	429a      	cmp	r2, r3
 8001410:	d130      	bne.n	8001474 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	3b01      	subs	r3, #1
 800141e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001420:	429a      	cmp	r2, r3
 8001422:	d127      	bne.n	8001474 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001430:	429a      	cmp	r2, r3
 8001432:	d11f      	bne.n	8001474 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800143e:	2a07      	cmp	r2, #7
 8001440:	bf14      	ite	ne
 8001442:	2201      	movne	r2, #1
 8001444:	2200      	moveq	r2, #0
 8001446:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001448:	4293      	cmp	r3, r2
 800144a:	d113      	bne.n	8001474 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	3b01      	subs	r3, #1
 800145a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d109      	bne.n	8001474 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	3b01      	subs	r3, #1
 800146e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3720      	adds	r7, #32
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	f99d808c 	.word	0xf99d808c

0800148c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0c8      	b.n	8001632 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b66      	ldr	r3, [pc, #408]	; (800163c <HAL_RCC_ClockConfig+0x1b0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d910      	bls.n	80014d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b63      	ldr	r3, [pc, #396]	; (800163c <HAL_RCC_ClockConfig+0x1b0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4961      	ldr	r1, [pc, #388]	; (800163c <HAL_RCC_ClockConfig+0x1b0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b5f      	ldr	r3, [pc, #380]	; (800163c <HAL_RCC_ClockConfig+0x1b0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0b0      	b.n	8001632 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d04c      	beq.n	8001576 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e4:	4b56      	ldr	r3, [pc, #344]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d121      	bne.n	8001534 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e09e      	b.n	8001632 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d107      	bne.n	800150c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d115      	bne.n	8001534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e092      	b.n	8001632 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d107      	bne.n	8001524 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001514:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e086      	b.n	8001632 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001524:	4b46      	ldr	r3, [pc, #280]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e07e      	b.n	8001632 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001534:	4b42      	ldr	r3, [pc, #264]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 0203 	bic.w	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	493f      	ldr	r1, [pc, #252]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001546:	f7ff f833 	bl	80005b0 <HAL_GetTick>
 800154a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154c:	e00a      	b.n	8001564 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154e:	f7ff f82f 	bl	80005b0 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e066      	b.n	8001632 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 020c 	and.w	r2, r3, #12
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	429a      	cmp	r2, r3
 8001574:	d1eb      	bne.n	800154e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	492c      	ldr	r1, [pc, #176]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <HAL_RCC_ClockConfig+0x1b0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d210      	bcs.n	80015c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_RCC_ClockConfig+0x1b0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	4924      	ldr	r1, [pc, #144]	; (800163c <HAL_RCC_ClockConfig+0x1b0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_RCC_ClockConfig+0x1b0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e036      	b.n	8001632 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4918      	ldr	r1, [pc, #96]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4910      	ldr	r1, [pc, #64]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001602:	f000 f825 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 8001606:	4601      	mov	r1, r0
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_RCC_ClockConfig+0x1b4>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	fa21 f303 	lsr.w	r3, r1, r3
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff76 	bl	8000518 <HAL_InitTick>
 800162c:	4603      	mov	r3, r0
 800162e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001630:	7afb      	ldrb	r3, [r7, #11]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40022000 	.word	0x40022000
 8001640:	40021000 	.word	0x40021000
 8001644:	08003fa4 	.word	0x08003fa4
 8001648:	2000000c 	.word	0x2000000c
 800164c:	20000000 	.word	0x20000000

08001650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_RCC_GetSysClockFreq+0x104>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001668:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <HAL_RCC_GetSysClockFreq+0x104>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x34>
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d121      	bne.n	80016c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d11e      	bne.n	80016c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_RCC_GetSysClockFreq+0x104>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_RCC_GetSysClockFreq+0x104>)
 8001692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	e005      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <HAL_RCC_GetSysClockFreq+0x104>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016ac:	4a2a      	ldr	r2, [pc, #168]	; (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10d      	bne.n	80016d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d102      	bne.n	80016ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_GetSysClockFreq+0x10c>)
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	e004      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_RCC_GetSysClockFreq+0x110>)
 80016d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d133      	bne.n	8001746 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_RCC_GetSysClockFreq+0x104>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d002      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0xaa>
 80016f2:	e005      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_GetSysClockFreq+0x10c>)
 80016f6:	617b      	str	r3, [r7, #20]
      break;
 80016f8:	e005      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_GetSysClockFreq+0x110>)
 80016fc:	617b      	str	r3, [r7, #20]
      break;
 80016fe:	e002      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	617b      	str	r3, [r7, #20]
      break;
 8001704:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_RCC_GetSysClockFreq+0x104>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	3301      	adds	r3, #1
 8001712:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_RCC_GetSysClockFreq+0x104>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	fb02 f203 	mul.w	r2, r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_GetSysClockFreq+0x104>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0e5b      	lsrs	r3, r3, #25
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	3301      	adds	r3, #1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	fbb2 f3f3 	udiv	r3, r2, r3
 8001744:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001746:	69bb      	ldr	r3, [r7, #24]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3724      	adds	r7, #36	; 0x24
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40021000 	.word	0x40021000
 8001758:	08003fbc 	.word	0x08003fbc
 800175c:	00f42400 	.word	0x00f42400
 8001760:	007a1200 	.word	0x007a1200

08001764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_RCC_GetHCLKFreq+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2000000c 	.word	0x2000000c

0800177c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001780:	f7ff fff0 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 8001784:	4601      	mov	r1, r0
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	fa21 f303 	lsr.w	r3, r1, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	08003fb4 	.word	0x08003fb4

080017a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80017ac:	f7ff ffda 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 80017b0:	4601      	mov	r1, r0
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	0adb      	lsrs	r3, r3, #11
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	08003fb4 	.word	0x08003fb4

080017d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017ec:	f7ff fa3a 	bl	8000c64 <HAL_PWREx_GetVoltageRange>
 80017f0:	6178      	str	r0, [r7, #20]
 80017f2:	e014      	b.n	800181e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	4a24      	ldr	r2, [pc, #144]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800180c:	f7ff fa2a 	bl	8000c64 <HAL_PWREx_GetVoltageRange>
 8001810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001824:	d10b      	bne.n	800183e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b80      	cmp	r3, #128	; 0x80
 800182a:	d919      	bls.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2ba0      	cmp	r3, #160	; 0xa0
 8001830:	d902      	bls.n	8001838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001832:	2302      	movs	r3, #2
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	e013      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001838:	2301      	movs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	e010      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b80      	cmp	r3, #128	; 0x80
 8001842:	d902      	bls.n	800184a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001844:	2303      	movs	r3, #3
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e00a      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d102      	bne.n	8001856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e004      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b70      	cmp	r3, #112	; 0x70
 800185a:	d101      	bne.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800185c:	2301      	movs	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 0207 	bic.w	r2, r3, #7
 8001868:	4909      	ldr	r1, [pc, #36]	; (8001890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	40022000 	.word	0x40022000

08001894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800189c:	2300      	movs	r3, #0
 800189e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018a0:	2300      	movs	r3, #0
 80018a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d03f      	beq.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018b8:	d01c      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80018ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018be:	d802      	bhi.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00e      	beq.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80018c4:	e01f      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80018c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018ca:	d003      	beq.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80018cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018d0:	d01c      	beq.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80018d2:	e018      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80018d4:	4b85      	ldr	r3, [pc, #532]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a84      	ldr	r2, [pc, #528]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018e0:	e015      	b.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fab9 	bl	8001e60 <RCCEx_PLLSAI1_Config>
 80018ee:	4603      	mov	r3, r0
 80018f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018f2:	e00c      	b.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3320      	adds	r3, #32
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fba0 	bl	8002040 <RCCEx_PLLSAI2_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001904:	e003      	b.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	74fb      	strb	r3, [r7, #19]
      break;
 800190a:	e000      	b.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800190c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800190e:	7cfb      	ldrb	r3, [r7, #19]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10b      	bne.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001914:	4b75      	ldr	r3, [pc, #468]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001922:	4972      	ldr	r1, [pc, #456]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001924:	4313      	orrs	r3, r2
 8001926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800192a:	e001      	b.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800192c:	7cfb      	ldrb	r3, [r7, #19]
 800192e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03f      	beq.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d01c      	beq.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194a:	d802      	bhi.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00e      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001950:	e01f      	b.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001956:	d003      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001958:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800195c:	d01c      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800195e:	e018      	b.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001960:	4b62      	ldr	r3, [pc, #392]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a61      	ldr	r2, [pc, #388]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800196c:	e015      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fa73 	bl	8001e60 <RCCEx_PLLSAI1_Config>
 800197a:	4603      	mov	r3, r0
 800197c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800197e:	e00c      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3320      	adds	r3, #32
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fb5a 	bl	8002040 <RCCEx_PLLSAI2_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001990:	e003      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	74fb      	strb	r3, [r7, #19]
      break;
 8001996:	e000      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800199a:	7cfb      	ldrb	r3, [r7, #19]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10b      	bne.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019a0:	4b52      	ldr	r3, [pc, #328]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019ae:	494f      	ldr	r1, [pc, #316]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80019b6:	e001      	b.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019b8:	7cfb      	ldrb	r3, [r7, #19]
 80019ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80a0 	beq.w	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80019de:	2300      	movs	r3, #0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00d      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e4:	4b41      	ldr	r3, [pc, #260]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	4a40      	ldr	r2, [pc, #256]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6593      	str	r3, [r2, #88]	; 0x58
 80019f0:	4b3e      	ldr	r3, [pc, #248]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fc:	2301      	movs	r3, #1
 80019fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a3a      	ldr	r2, [pc, #232]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a0c:	f7fe fdd0 	bl	80005b0 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a12:	e009      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7fe fdcc 	bl	80005b0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d902      	bls.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	74fb      	strb	r3, [r7, #19]
        break;
 8001a26:	e005      	b.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a28:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ef      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d15c      	bne.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01f      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d019      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a84:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d016      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7fe fd8b 	bl	80005b0 <HAL_GetTick>
 8001a9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9c:	e00b      	b.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7fe fd87 	bl	80005b0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d902      	bls.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	74fb      	strb	r3, [r7, #19]
            break;
 8001ab4:	e006      	b.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ec      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001ac4:	7cfb      	ldrb	r3, [r7, #19]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ada:	4904      	ldr	r1, [pc, #16]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ae2:	e009      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ae4:	7cfb      	ldrb	r3, [r7, #19]
 8001ae6:	74bb      	strb	r3, [r7, #18]
 8001ae8:	e006      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001af4:	7cfb      	ldrb	r3, [r7, #19]
 8001af6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001af8:	7c7b      	ldrb	r3, [r7, #17]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d105      	bne.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afe:	4b9e      	ldr	r3, [pc, #632]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	4a9d      	ldr	r2, [pc, #628]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b16:	4b98      	ldr	r3, [pc, #608]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1c:	f023 0203 	bic.w	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	4994      	ldr	r1, [pc, #592]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00a      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b38:	4b8f      	ldr	r3, [pc, #572]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	f023 020c 	bic.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b46:	498c      	ldr	r1, [pc, #560]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00a      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b5a:	4b87      	ldr	r3, [pc, #540]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4983      	ldr	r1, [pc, #524]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00a      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b7c:	4b7e      	ldr	r3, [pc, #504]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	497b      	ldr	r1, [pc, #492]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bac:	4972      	ldr	r1, [pc, #456]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00a      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001bc0:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	496a      	ldr	r1, [pc, #424]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00a      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	4961      	ldr	r1, [pc, #388]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00a      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c04:	4b5c      	ldr	r3, [pc, #368]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	4959      	ldr	r1, [pc, #356]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c26:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c34:	4950      	ldr	r1, [pc, #320]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	4948      	ldr	r1, [pc, #288]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00a      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c6a:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	493f      	ldr	r1, [pc, #252]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d028      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c8c:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c9a:	4937      	ldr	r1, [pc, #220]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001caa:	d106      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cac:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4a31      	ldr	r2, [pc, #196]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cb6:	60d3      	str	r3, [r2, #12]
 8001cb8:	e011      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f8c8 	bl	8001e60 <RCCEx_PLLSAI1_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001cda:	7cfb      	ldrb	r3, [r7, #19]
 8001cdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d028      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	491f      	ldr	r1, [pc, #124]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d08:	d106      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4a1a      	ldr	r2, [pc, #104]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d14:	60d3      	str	r3, [r2, #12]
 8001d16:	e011      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2101      	movs	r1, #1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f899 	bl	8001e60 <RCCEx_PLLSAI1_Config>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d32:	7cfb      	ldrb	r3, [r7, #19]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d02b      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d66:	d109      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4a02      	ldr	r2, [pc, #8]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d72:	60d3      	str	r3, [r2, #12]
 8001d74:	e014      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f867 	bl	8001e60 <RCCEx_PLLSAI1_Config>
 8001d92:	4603      	mov	r3, r0
 8001d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d96:	7cfb      	ldrb	r3, [r7, #19]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02f      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dba:	4928      	ldr	r1, [pc, #160]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dca:	d10d      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f844 	bl	8001e60 <RCCEx_PLLSAI1_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d014      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	74bb      	strb	r3, [r7, #18]
 8001de6:	e011      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3320      	adds	r3, #32
 8001df6:	2102      	movs	r1, #2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f921 	bl	8002040 <RCCEx_PLLSAI2_Config>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e02:	7cfb      	ldrb	r3, [r7, #19]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001e08:	7cfb      	ldrb	r3, [r7, #19]
 8001e0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00a      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e26:	490d      	ldr	r1, [pc, #52]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e4a:	4904      	ldr	r1, [pc, #16]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001e52:	7cbb      	ldrb	r3, [r7, #18]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000

08001e60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d018      	beq.n	8001eac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e7a:	4b70      	ldr	r3, [pc, #448]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0203 	and.w	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10d      	bne.n	8001ea6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e92:	4b6a      	ldr	r3, [pc, #424]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d044      	beq.n	8001f30 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e041      	b.n	8001f30 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d00c      	beq.n	8001ece <RCCEx_PLLSAI1_Config+0x6e>
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d013      	beq.n	8001ee0 <RCCEx_PLLSAI1_Config+0x80>
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d120      	bne.n	8001efe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ebc:	4b5f      	ldr	r3, [pc, #380]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11d      	bne.n	8001f04 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ecc:	e01a      	b.n	8001f04 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ede:	e013      	b.n	8001f08 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001ee0:	4b56      	ldr	r3, [pc, #344]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001efc:	e006      	b.n	8001f0c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
      break;
 8001f02:	e004      	b.n	8001f0e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001f04:	bf00      	nop
 8001f06:	e002      	b.n	8001f0e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001f08:	bf00      	nop
 8001f0a:	e000      	b.n	8001f0e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001f0c:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10d      	bne.n	8001f30 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f14:	4b49      	ldr	r3, [pc, #292]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	4944      	ldr	r1, [pc, #272]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d17d      	bne.n	8002032 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f36:	4b41      	ldr	r3, [pc, #260]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a40      	ldr	r2, [pc, #256]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f42:	f7fe fb35 	bl	80005b0 <HAL_GetTick>
 8001f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f48:	e009      	b.n	8001f5e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f4a:	f7fe fb31 	bl	80005b0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d902      	bls.n	8001f5e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	73fb      	strb	r3, [r7, #15]
        break;
 8001f5c:	e005      	b.n	8001f6a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1ef      	bne.n	8001f4a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d160      	bne.n	8002032 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d111      	bne.n	8001f9a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6892      	ldr	r2, [r2, #8]
 8001f86:	0211      	lsls	r1, r2, #8
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68d2      	ldr	r2, [r2, #12]
 8001f8c:	0912      	lsrs	r2, r2, #4
 8001f8e:	0452      	lsls	r2, r2, #17
 8001f90:	430a      	orrs	r2, r1
 8001f92:	492a      	ldr	r1, [pc, #168]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	610b      	str	r3, [r1, #16]
 8001f98:	e027      	b.n	8001fea <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d112      	bne.n	8001fc6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fa0:	4b26      	ldr	r3, [pc, #152]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6892      	ldr	r2, [r2, #8]
 8001fb0:	0211      	lsls	r1, r2, #8
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6912      	ldr	r2, [r2, #16]
 8001fb6:	0852      	lsrs	r2, r2, #1
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	0552      	lsls	r2, r2, #21
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	491f      	ldr	r1, [pc, #124]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	610b      	str	r3, [r1, #16]
 8001fc4:	e011      	b.n	8001fea <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001fce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6892      	ldr	r2, [r2, #8]
 8001fd6:	0211      	lsls	r1, r2, #8
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6952      	ldr	r2, [r2, #20]
 8001fdc:	0852      	lsrs	r2, r2, #1
 8001fde:	3a01      	subs	r2, #1
 8001fe0:	0652      	lsls	r2, r2, #25
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	4915      	ldr	r1, [pc, #84]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fadb 	bl	80005b0 <HAL_GetTick>
 8001ffa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ffc:	e009      	b.n	8002012 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ffe:	f7fe fad7 	bl	80005b0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d902      	bls.n	8002012 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	73fb      	strb	r3, [r7, #15]
          break;
 8002010:	e005      	b.n	800201e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0ef      	beq.n	8001ffe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4903      	ldr	r1, [pc, #12]	; (800203c <RCCEx_PLLSAI1_Config+0x1dc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000

08002040 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800204e:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d018      	beq.n	800208c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800205a:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0203 	and.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d10d      	bne.n	8002086 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
       ||
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
       ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d044      	beq.n	8002110 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	e041      	b.n	8002110 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d00c      	beq.n	80020ae <RCCEx_PLLSAI2_Config+0x6e>
 8002094:	2b03      	cmp	r3, #3
 8002096:	d013      	beq.n	80020c0 <RCCEx_PLLSAI2_Config+0x80>
 8002098:	2b01      	cmp	r3, #1
 800209a:	d120      	bne.n	80020de <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800209c:	4b54      	ldr	r3, [pc, #336]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11d      	bne.n	80020e4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ac:	e01a      	b.n	80020e4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020ae:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020be:	e013      	b.n	80020e8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80020c0:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10f      	bne.n	80020ec <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020cc:	4b48      	ldr	r3, [pc, #288]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80020dc:	e006      	b.n	80020ec <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
      break;
 80020e2:	e004      	b.n	80020ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80020e4:	bf00      	nop
 80020e6:	e002      	b.n	80020ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80020e8:	bf00      	nop
 80020ea:	e000      	b.n	80020ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80020ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10d      	bne.n	8002110 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80020f4:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	3b01      	subs	r3, #1
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	430b      	orrs	r3, r1
 800210a:	4939      	ldr	r1, [pc, #228]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800210c:	4313      	orrs	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d167      	bne.n	80021e6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002116:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a35      	ldr	r2, [pc, #212]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800211c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002122:	f7fe fa45 	bl	80005b0 <HAL_GetTick>
 8002126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002128:	e009      	b.n	800213e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800212a:	f7fe fa41 	bl	80005b0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d902      	bls.n	800213e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	73fb      	strb	r3, [r7, #15]
        break;
 800213c:	e005      	b.n	800214a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800213e:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1ef      	bne.n	800212a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d14a      	bne.n	80021e6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d111      	bne.n	800217a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800215e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6892      	ldr	r2, [r2, #8]
 8002166:	0211      	lsls	r1, r2, #8
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68d2      	ldr	r2, [r2, #12]
 800216c:	0912      	lsrs	r2, r2, #4
 800216e:	0452      	lsls	r2, r2, #17
 8002170:	430a      	orrs	r2, r1
 8002172:	491f      	ldr	r1, [pc, #124]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002174:	4313      	orrs	r3, r2
 8002176:	614b      	str	r3, [r1, #20]
 8002178:	e011      	b.n	800219e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002182:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6892      	ldr	r2, [r2, #8]
 800218a:	0211      	lsls	r1, r2, #8
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6912      	ldr	r2, [r2, #16]
 8002190:	0852      	lsrs	r2, r2, #1
 8002192:	3a01      	subs	r2, #1
 8002194:	0652      	lsls	r2, r2, #25
 8002196:	430a      	orrs	r2, r1
 8002198:	4915      	ldr	r1, [pc, #84]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800219a:	4313      	orrs	r3, r2
 800219c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021aa:	f7fe fa01 	bl	80005b0 <HAL_GetTick>
 80021ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80021b0:	e009      	b.n	80021c6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021b2:	f7fe f9fd 	bl	80005b0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d902      	bls.n	80021c6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	73fb      	strb	r3, [r7, #15]
          break;
 80021c4:	e005      	b.n	80021d2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0ef      	beq.n	80021b2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4903      	ldr	r1, [pc, #12]	; (80021f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e040      	b.n	8002288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f001 fd34 	bl	8003c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	; 0x24
 8002220:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa6e 	bl	8002714 <UART_SetConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e022      	b.n	8002288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fdaa 	bl	8002da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800225e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800226e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fe31 	bl	8002ee8 <UART_CheckIdleState>
 8002286:	4603      	mov	r3, r0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	4613      	mov	r3, r2
 800229c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d144      	bne.n	8002330 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_UART_Transmit_IT+0x22>
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e03d      	b.n	8002332 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_UART_Transmit_IT+0x34>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e036      	b.n	8002332 <HAL_UART_Transmit_IT+0xa2>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	88fa      	ldrh	r2, [r7, #6]
 80022de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2221      	movs	r2, #33	; 0x21
 80022f2:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fc:	d107      	bne.n	800230e <HAL_UART_Transmit_IT+0x7e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_UART_Transmit_IT+0xb0>)
 800230a:	665a      	str	r2, [r3, #100]	; 0x64
 800230c:	e002      	b.n	8002314 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_UART_Transmit_IT+0xb4>)
 8002312:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800232a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	e000      	b.n	8002332 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002330:	2302      	movs	r3, #2
  }
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	080030e3 	.word	0x080030e3
 8002344:	0800306f 	.word	0x0800306f

08002348 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800235a:	2b20      	cmp	r3, #32
 800235c:	f040 808a 	bne.w	8002474 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_UART_Receive_IT+0x24>
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e082      	b.n	8002476 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_UART_Receive_IT+0x36>
 800237a:	2302      	movs	r3, #2
 800237c:	e07b      	b.n	8002476 <HAL_UART_Receive_IT+0x12e>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	88fa      	ldrh	r2, [r7, #6]
 8002398:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023aa:	d10e      	bne.n	80023ca <HAL_UART_Receive_IT+0x82>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <HAL_UART_Receive_IT+0x78>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80023ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023be:	e02d      	b.n	800241c <HAL_UART_Receive_IT+0xd4>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	22ff      	movs	r2, #255	; 0xff
 80023c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023c8:	e028      	b.n	800241c <HAL_UART_Receive_IT+0xd4>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <HAL_UART_Receive_IT+0xa6>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <HAL_UART_Receive_IT+0x9c>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	22ff      	movs	r2, #255	; 0xff
 80023de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023e2:	e01b      	b.n	800241c <HAL_UART_Receive_IT+0xd4>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	227f      	movs	r2, #127	; 0x7f
 80023e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023ec:	e016      	b.n	800241c <HAL_UART_Receive_IT+0xd4>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023f6:	d10d      	bne.n	8002414 <HAL_UART_Receive_IT+0xcc>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d104      	bne.n	800240a <HAL_UART_Receive_IT+0xc2>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	227f      	movs	r2, #127	; 0x7f
 8002404:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002408:	e008      	b.n	800241c <HAL_UART_Receive_IT+0xd4>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	223f      	movs	r2, #63	; 0x3f
 800240e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002412:	e003      	b.n	800241c <HAL_UART_Receive_IT+0xd4>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2222      	movs	r2, #34	; 0x22
 8002426:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002440:	d107      	bne.n	8002452 <HAL_UART_Receive_IT+0x10a>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d103      	bne.n	8002452 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <HAL_UART_Receive_IT+0x13c>)
 800244e:	661a      	str	r2, [r3, #96]	; 0x60
 8002450:	e002      	b.n	8002458 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <HAL_UART_Receive_IT+0x140>)
 8002456:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800246e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	0800323b 	.word	0x0800323b
 8002488:	08003191 	.word	0x08003191

0800248c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d113      	bne.n	80024e2 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00e      	beq.n	80024e2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80ff 	beq.w	80026d6 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
      }
      return;
 80024e0:	e0f9      	b.n	80026d6 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80c1 	beq.w	800266c <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80b6 	beq.w	800266c <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00e      	beq.n	8002528 <HAL_UART_IRQHandler+0x9c>
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <HAL_UART_IRQHandler+0xc4>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2202      	movs	r2, #2
 8002542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002548:	f043 0204 	orr.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00e      	beq.n	8002578 <HAL_UART_IRQHandler+0xec>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d009      	beq.n	8002578 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2204      	movs	r2, #4
 800256a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002570:	f043 0202 	orr.w	r2, r3, #2
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d013      	beq.n	80025aa <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d104      	bne.n	8002596 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2208      	movs	r2, #8
 800259c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a2:	f043 0208 	orr.w	r2, r3, #8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8093 	beq.w	80026da <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e8:	2b40      	cmp	r3, #64	; 0x40
 80025ea:	d004      	beq.n	80025f6 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d031      	beq.n	800265a <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fd03 	bl	8003002 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d123      	bne.n	8002652 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002618:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d013      	beq.n	800264a <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002626:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <HAL_UART_IRQHandler+0x25c>)
 8002628:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe f8fd 	bl	800082e <HAL_DMA_Abort_IT>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002644:	4610      	mov	r0, r2
 8002646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00e      	b.n	8002668 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f001 f8bc 	bl	80037c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e00a      	b.n	8002668 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f001 f8b8 	bl	80037c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	e006      	b.n	8002668 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f001 f8b4 	bl	80037c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002666:	e038      	b.n	80026da <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002668:	bf00      	nop
    return;
 800266a:	e036      	b.n	80026da <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <HAL_UART_IRQHandler+0x206>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fe2a 	bl	80032e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002690:	e026      	b.n	80026e0 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d017      	beq.n	80026de <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
    }
    return;
 80026b6:	e012      	b.n	80026de <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00e      	beq.n	80026e0 <HAL_UART_IRQHandler+0x254>
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fd46 	bl	800315e <UART_EndTransmit_IT>
    return;
 80026d2:	bf00      	nop
 80026d4:	e004      	b.n	80026e0 <HAL_UART_IRQHandler+0x254>
      return;
 80026d6:	bf00      	nop
 80026d8:	e002      	b.n	80026e0 <HAL_UART_IRQHandler+0x254>
    return;
 80026da:	bf00      	nop
 80026dc:	e000      	b.n	80026e0 <HAL_UART_IRQHandler+0x254>
    return;
 80026de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	08003043 	.word	0x08003043

080026ec <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026fe:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4313      	orrs	r3, r2
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002714:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002718:	b088      	sub	sp, #32
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4313      	orrs	r3, r2
 8002740:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4bac      	ldr	r3, [pc, #688]	; (80029fc <UART_SetConfig+0x2e8>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	69f9      	ldr	r1, [r7, #28]
 8002752:	430b      	orrs	r3, r1
 8002754:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4aa2      	ldr	r2, [pc, #648]	; (8002a00 <UART_SetConfig+0x2ec>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	4313      	orrs	r3, r2
 8002784:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a99      	ldr	r2, [pc, #612]	; (8002a04 <UART_SetConfig+0x2f0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d121      	bne.n	80027e8 <UART_SetConfig+0xd4>
 80027a4:	4b98      	ldr	r3, [pc, #608]	; (8002a08 <UART_SetConfig+0x2f4>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d816      	bhi.n	80027e0 <UART_SetConfig+0xcc>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <UART_SetConfig+0xa4>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027d5 	.word	0x080027d5
 80027c0:	080027cf 	.word	0x080027cf
 80027c4:	080027db 	.word	0x080027db
 80027c8:	2301      	movs	r3, #1
 80027ca:	76fb      	strb	r3, [r7, #27]
 80027cc:	e0e8      	b.n	80029a0 <UART_SetConfig+0x28c>
 80027ce:	2302      	movs	r3, #2
 80027d0:	76fb      	strb	r3, [r7, #27]
 80027d2:	e0e5      	b.n	80029a0 <UART_SetConfig+0x28c>
 80027d4:	2304      	movs	r3, #4
 80027d6:	76fb      	strb	r3, [r7, #27]
 80027d8:	e0e2      	b.n	80029a0 <UART_SetConfig+0x28c>
 80027da:	2308      	movs	r3, #8
 80027dc:	76fb      	strb	r3, [r7, #27]
 80027de:	e0df      	b.n	80029a0 <UART_SetConfig+0x28c>
 80027e0:	2310      	movs	r3, #16
 80027e2:	76fb      	strb	r3, [r7, #27]
 80027e4:	bf00      	nop
 80027e6:	e0db      	b.n	80029a0 <UART_SetConfig+0x28c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a87      	ldr	r2, [pc, #540]	; (8002a0c <UART_SetConfig+0x2f8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d134      	bne.n	800285c <UART_SetConfig+0x148>
 80027f2:	4b85      	ldr	r3, [pc, #532]	; (8002a08 <UART_SetConfig+0x2f4>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d829      	bhi.n	8002854 <UART_SetConfig+0x140>
 8002800:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <UART_SetConfig+0xf4>)
 8002802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002806:	bf00      	nop
 8002808:	0800283d 	.word	0x0800283d
 800280c:	08002855 	.word	0x08002855
 8002810:	08002855 	.word	0x08002855
 8002814:	08002855 	.word	0x08002855
 8002818:	08002849 	.word	0x08002849
 800281c:	08002855 	.word	0x08002855
 8002820:	08002855 	.word	0x08002855
 8002824:	08002855 	.word	0x08002855
 8002828:	08002843 	.word	0x08002843
 800282c:	08002855 	.word	0x08002855
 8002830:	08002855 	.word	0x08002855
 8002834:	08002855 	.word	0x08002855
 8002838:	0800284f 	.word	0x0800284f
 800283c:	2300      	movs	r3, #0
 800283e:	76fb      	strb	r3, [r7, #27]
 8002840:	e0ae      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002842:	2302      	movs	r3, #2
 8002844:	76fb      	strb	r3, [r7, #27]
 8002846:	e0ab      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002848:	2304      	movs	r3, #4
 800284a:	76fb      	strb	r3, [r7, #27]
 800284c:	e0a8      	b.n	80029a0 <UART_SetConfig+0x28c>
 800284e:	2308      	movs	r3, #8
 8002850:	76fb      	strb	r3, [r7, #27]
 8002852:	e0a5      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002854:	2310      	movs	r3, #16
 8002856:	76fb      	strb	r3, [r7, #27]
 8002858:	bf00      	nop
 800285a:	e0a1      	b.n	80029a0 <UART_SetConfig+0x28c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6b      	ldr	r2, [pc, #428]	; (8002a10 <UART_SetConfig+0x2fc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d120      	bne.n	80028a8 <UART_SetConfig+0x194>
 8002866:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <UART_SetConfig+0x2f4>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002870:	2b10      	cmp	r3, #16
 8002872:	d00f      	beq.n	8002894 <UART_SetConfig+0x180>
 8002874:	2b10      	cmp	r3, #16
 8002876:	d802      	bhi.n	800287e <UART_SetConfig+0x16a>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <UART_SetConfig+0x174>
 800287c:	e010      	b.n	80028a0 <UART_SetConfig+0x18c>
 800287e:	2b20      	cmp	r3, #32
 8002880:	d005      	beq.n	800288e <UART_SetConfig+0x17a>
 8002882:	2b30      	cmp	r3, #48	; 0x30
 8002884:	d009      	beq.n	800289a <UART_SetConfig+0x186>
 8002886:	e00b      	b.n	80028a0 <UART_SetConfig+0x18c>
 8002888:	2300      	movs	r3, #0
 800288a:	76fb      	strb	r3, [r7, #27]
 800288c:	e088      	b.n	80029a0 <UART_SetConfig+0x28c>
 800288e:	2302      	movs	r3, #2
 8002890:	76fb      	strb	r3, [r7, #27]
 8002892:	e085      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002894:	2304      	movs	r3, #4
 8002896:	76fb      	strb	r3, [r7, #27]
 8002898:	e082      	b.n	80029a0 <UART_SetConfig+0x28c>
 800289a:	2308      	movs	r3, #8
 800289c:	76fb      	strb	r3, [r7, #27]
 800289e:	e07f      	b.n	80029a0 <UART_SetConfig+0x28c>
 80028a0:	2310      	movs	r3, #16
 80028a2:	76fb      	strb	r3, [r7, #27]
 80028a4:	bf00      	nop
 80028a6:	e07b      	b.n	80029a0 <UART_SetConfig+0x28c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a59      	ldr	r2, [pc, #356]	; (8002a14 <UART_SetConfig+0x300>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d120      	bne.n	80028f4 <UART_SetConfig+0x1e0>
 80028b2:	4b55      	ldr	r3, [pc, #340]	; (8002a08 <UART_SetConfig+0x2f4>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d00f      	beq.n	80028e0 <UART_SetConfig+0x1cc>
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d802      	bhi.n	80028ca <UART_SetConfig+0x1b6>
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <UART_SetConfig+0x1c0>
 80028c8:	e010      	b.n	80028ec <UART_SetConfig+0x1d8>
 80028ca:	2b80      	cmp	r3, #128	; 0x80
 80028cc:	d005      	beq.n	80028da <UART_SetConfig+0x1c6>
 80028ce:	2bc0      	cmp	r3, #192	; 0xc0
 80028d0:	d009      	beq.n	80028e6 <UART_SetConfig+0x1d2>
 80028d2:	e00b      	b.n	80028ec <UART_SetConfig+0x1d8>
 80028d4:	2300      	movs	r3, #0
 80028d6:	76fb      	strb	r3, [r7, #27]
 80028d8:	e062      	b.n	80029a0 <UART_SetConfig+0x28c>
 80028da:	2302      	movs	r3, #2
 80028dc:	76fb      	strb	r3, [r7, #27]
 80028de:	e05f      	b.n	80029a0 <UART_SetConfig+0x28c>
 80028e0:	2304      	movs	r3, #4
 80028e2:	76fb      	strb	r3, [r7, #27]
 80028e4:	e05c      	b.n	80029a0 <UART_SetConfig+0x28c>
 80028e6:	2308      	movs	r3, #8
 80028e8:	76fb      	strb	r3, [r7, #27]
 80028ea:	e059      	b.n	80029a0 <UART_SetConfig+0x28c>
 80028ec:	2310      	movs	r3, #16
 80028ee:	76fb      	strb	r3, [r7, #27]
 80028f0:	bf00      	nop
 80028f2:	e055      	b.n	80029a0 <UART_SetConfig+0x28c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a47      	ldr	r2, [pc, #284]	; (8002a18 <UART_SetConfig+0x304>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d124      	bne.n	8002948 <UART_SetConfig+0x234>
 80028fe:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <UART_SetConfig+0x2f4>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290c:	d012      	beq.n	8002934 <UART_SetConfig+0x220>
 800290e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002912:	d802      	bhi.n	800291a <UART_SetConfig+0x206>
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <UART_SetConfig+0x214>
 8002918:	e012      	b.n	8002940 <UART_SetConfig+0x22c>
 800291a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800291e:	d006      	beq.n	800292e <UART_SetConfig+0x21a>
 8002920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002924:	d009      	beq.n	800293a <UART_SetConfig+0x226>
 8002926:	e00b      	b.n	8002940 <UART_SetConfig+0x22c>
 8002928:	2300      	movs	r3, #0
 800292a:	76fb      	strb	r3, [r7, #27]
 800292c:	e038      	b.n	80029a0 <UART_SetConfig+0x28c>
 800292e:	2302      	movs	r3, #2
 8002930:	76fb      	strb	r3, [r7, #27]
 8002932:	e035      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002934:	2304      	movs	r3, #4
 8002936:	76fb      	strb	r3, [r7, #27]
 8002938:	e032      	b.n	80029a0 <UART_SetConfig+0x28c>
 800293a:	2308      	movs	r3, #8
 800293c:	76fb      	strb	r3, [r7, #27]
 800293e:	e02f      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002940:	2310      	movs	r3, #16
 8002942:	76fb      	strb	r3, [r7, #27]
 8002944:	bf00      	nop
 8002946:	e02b      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <UART_SetConfig+0x2ec>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d124      	bne.n	800299c <UART_SetConfig+0x288>
 8002952:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <UART_SetConfig+0x2f4>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	d012      	beq.n	8002988 <UART_SetConfig+0x274>
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002966:	d802      	bhi.n	800296e <UART_SetConfig+0x25a>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <UART_SetConfig+0x268>
 800296c:	e012      	b.n	8002994 <UART_SetConfig+0x280>
 800296e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002972:	d006      	beq.n	8002982 <UART_SetConfig+0x26e>
 8002974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002978:	d009      	beq.n	800298e <UART_SetConfig+0x27a>
 800297a:	e00b      	b.n	8002994 <UART_SetConfig+0x280>
 800297c:	2300      	movs	r3, #0
 800297e:	76fb      	strb	r3, [r7, #27]
 8002980:	e00e      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002982:	2302      	movs	r3, #2
 8002984:	76fb      	strb	r3, [r7, #27]
 8002986:	e00b      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002988:	2304      	movs	r3, #4
 800298a:	76fb      	strb	r3, [r7, #27]
 800298c:	e008      	b.n	80029a0 <UART_SetConfig+0x28c>
 800298e:	2308      	movs	r3, #8
 8002990:	76fb      	strb	r3, [r7, #27]
 8002992:	e005      	b.n	80029a0 <UART_SetConfig+0x28c>
 8002994:	2310      	movs	r3, #16
 8002996:	76fb      	strb	r3, [r7, #27]
 8002998:	bf00      	nop
 800299a:	e001      	b.n	80029a0 <UART_SetConfig+0x28c>
 800299c:	2310      	movs	r3, #16
 800299e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <UART_SetConfig+0x2ec>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	f040 80fa 	bne.w	8002ba0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029ac:	7efb      	ldrb	r3, [r7, #27]
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d836      	bhi.n	8002a20 <UART_SetConfig+0x30c>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <UART_SetConfig+0x2a4>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	080029dd 	.word	0x080029dd
 80029bc:	08002a21 	.word	0x08002a21
 80029c0:	080029e5 	.word	0x080029e5
 80029c4:	08002a21 	.word	0x08002a21
 80029c8:	080029eb 	.word	0x080029eb
 80029cc:	08002a21 	.word	0x08002a21
 80029d0:	08002a21 	.word	0x08002a21
 80029d4:	08002a21 	.word	0x08002a21
 80029d8:	080029f3 	.word	0x080029f3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80029dc:	f7fe fece 	bl	800177c <HAL_RCC_GetPCLK1Freq>
 80029e0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029e2:	e020      	b.n	8002a26 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <UART_SetConfig+0x308>)
 80029e6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029e8:	e01d      	b.n	8002a26 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80029ea:	f7fe fe31 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 80029ee:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029f0:	e019      	b.n	8002a26 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80029f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029f8:	e015      	b.n	8002a26 <UART_SetConfig+0x312>
 80029fa:	bf00      	nop
 80029fc:	efff69f3 	.word	0xefff69f3
 8002a00:	40008000 	.word	0x40008000
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40004400 	.word	0x40004400
 8002a10:	40004800 	.word	0x40004800
 8002a14:	40004c00 	.word	0x40004c00
 8002a18:	40005000 	.word	0x40005000
 8002a1c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	74fb      	strb	r3, [r7, #19]
        break;
 8002a24:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 81ac 	beq.w	8002d86 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d305      	bcc.n	8002a4a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d902      	bls.n	8002a50 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	74fb      	strb	r3, [r7, #19]
 8002a4e:	e19a      	b.n	8002d86 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002a50:	7efb      	ldrb	r3, [r7, #27]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	f200 8091 	bhi.w	8002b7a <UART_SetConfig+0x466>
 8002a58:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <UART_SetConfig+0x34c>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002a85 	.word	0x08002a85
 8002a64:	08002b7b 	.word	0x08002b7b
 8002a68:	08002ad1 	.word	0x08002ad1
 8002a6c:	08002b7b 	.word	0x08002b7b
 8002a70:	08002b05 	.word	0x08002b05
 8002a74:	08002b7b 	.word	0x08002b7b
 8002a78:	08002b7b 	.word	0x08002b7b
 8002a7c:	08002b7b 	.word	0x08002b7b
 8002a80:	08002b51 	.word	0x08002b51
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a84:	f7fe fe7a 	bl	800177c <HAL_RCC_GetPCLK1Freq>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	f04f 0400 	mov.w	r4, #0
 8002a98:	0214      	lsls	r4, r2, #8
 8002a9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002a9e:	020b      	lsls	r3, r1, #8
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6852      	ldr	r2, [r2, #4]
 8002aa4:	0852      	lsrs	r2, r2, #1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	eb13 0b01 	adds.w	fp, r3, r1
 8002ab0:	eb44 0c02 	adc.w	ip, r4, r2
 8002ab4:	4658      	mov	r0, fp
 8002ab6:	4661      	mov	r1, ip
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f04f 0400 	mov.w	r4, #0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	f7fd fb88 	bl	80001d8 <__aeabi_uldivmod>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ace:	e057      	b.n	8002b80 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	f04f 0400 	mov.w	r4, #0
 8002ada:	49b1      	ldr	r1, [pc, #708]	; (8002da0 <UART_SetConfig+0x68c>)
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	eb13 0b01 	adds.w	fp, r3, r1
 8002ae4:	eb44 0c02 	adc.w	ip, r4, r2
 8002ae8:	4658      	mov	r0, fp
 8002aea:	4661      	mov	r1, ip
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f04f 0400 	mov.w	r4, #0
 8002af4:	461a      	mov	r2, r3
 8002af6:	4623      	mov	r3, r4
 8002af8:	f7fd fb6e 	bl	80001d8 <__aeabi_uldivmod>
 8002afc:	4603      	mov	r3, r0
 8002afe:	460c      	mov	r4, r1
 8002b00:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b02:	e03d      	b.n	8002b80 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b04:	f7fe fda4 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f04f 0400 	mov.w	r4, #0
 8002b18:	0214      	lsls	r4, r2, #8
 8002b1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002b1e:	020b      	lsls	r3, r1, #8
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6852      	ldr	r2, [r2, #4]
 8002b24:	0852      	lsrs	r2, r2, #1
 8002b26:	4611      	mov	r1, r2
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	eb13 0b01 	adds.w	fp, r3, r1
 8002b30:	eb44 0c02 	adc.w	ip, r4, r2
 8002b34:	4658      	mov	r0, fp
 8002b36:	4661      	mov	r1, ip
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f04f 0400 	mov.w	r4, #0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4623      	mov	r3, r4
 8002b44:	f7fd fb48 	bl	80001d8 <__aeabi_uldivmod>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b4e:	e017      	b.n	8002b80 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	f04f 0400 	mov.w	r4, #0
 8002b5a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002b5e:	f144 0100 	adc.w	r1, r4, #0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f04f 0400 	mov.w	r4, #0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4623      	mov	r3, r4
 8002b6e:	f7fd fb33 	bl	80001d8 <__aeabi_uldivmod>
 8002b72:	4603      	mov	r3, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b78:	e002      	b.n	8002b80 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b7e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b86:	d308      	bcc.n	8002b9a <UART_SetConfig+0x486>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8e:	d204      	bcs.n	8002b9a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	e0f5      	b.n	8002d86 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	74fb      	strb	r3, [r7, #19]
 8002b9e:	e0f2      	b.n	8002d86 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba8:	d17f      	bne.n	8002caa <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8002baa:	7efb      	ldrb	r3, [r7, #27]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d85c      	bhi.n	8002c6a <UART_SetConfig+0x556>
 8002bb0:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <UART_SetConfig+0x4a4>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002bfb 	.word	0x08002bfb
 8002bc0:	08002c19 	.word	0x08002c19
 8002bc4:	08002c6b 	.word	0x08002c6b
 8002bc8:	08002c35 	.word	0x08002c35
 8002bcc:	08002c6b 	.word	0x08002c6b
 8002bd0:	08002c6b 	.word	0x08002c6b
 8002bd4:	08002c6b 	.word	0x08002c6b
 8002bd8:	08002c53 	.word	0x08002c53
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bdc:	f7fe fdce 	bl	800177c <HAL_RCC_GetPCLK1Freq>
 8002be0:	4603      	mov	r3, r0
 8002be2:	005a      	lsls	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	441a      	add	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002bf8:	e03a      	b.n	8002c70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002bfa:	f7fe fdd5 	bl	80017a8 <HAL_RCC_GetPCLK2Freq>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	005a      	lsls	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c16:	e02b      	b.n	8002c70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002c22:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6852      	ldr	r2, [r2, #4]
 8002c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c32:	e01d      	b.n	8002c70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c34:	f7fe fd0c 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	005a      	lsls	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	441a      	add	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c50:	e00e      	b.n	8002c70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c68:	e002      	b.n	8002c70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002c6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	d916      	bls.n	8002ca4 <UART_SetConfig+0x590>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d212      	bcs.n	8002ca4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f023 030f 	bic.w	r3, r3, #15
 8002c86:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	897a      	ldrh	r2, [r7, #10]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	e070      	b.n	8002d86 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	74fb      	strb	r3, [r7, #19]
 8002ca8:	e06d      	b.n	8002d86 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8002caa:	7efb      	ldrb	r3, [r7, #27]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d859      	bhi.n	8002d64 <UART_SetConfig+0x650>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <UART_SetConfig+0x5a4>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	08002cf9 	.word	0x08002cf9
 8002cc0:	08002d15 	.word	0x08002d15
 8002cc4:	08002d65 	.word	0x08002d65
 8002cc8:	08002d31 	.word	0x08002d31
 8002ccc:	08002d65 	.word	0x08002d65
 8002cd0:	08002d65 	.word	0x08002d65
 8002cd4:	08002d65 	.word	0x08002d65
 8002cd8:	08002d4d 	.word	0x08002d4d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002cdc:	f7fe fd4e 	bl	800177c <HAL_RCC_GetPCLK1Freq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cf6:	e038      	b.n	8002d6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002cf8:	f7fe fd56 	bl	80017a8 <HAL_RCC_GetPCLK2Freq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d12:	e02a      	b.n	8002d6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d1e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6852      	ldr	r2, [r2, #4]
 8002d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d2e:	e01c      	b.n	8002d6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d30:	f7fe fc8e 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d4a:	e00e      	b.n	8002d6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d62:	e002      	b.n	8002d6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	74fb      	strb	r3, [r7, #19]
        break;
 8002d68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d908      	bls.n	8002d82 <UART_SetConfig+0x66e>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d76:	d204      	bcs.n	8002d82 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	e001      	b.n	8002d86 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002d9e:	bf00      	nop
 8002da0:	f4240000 	.word	0xf4240000

08002da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01a      	beq.n	8002eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea2:	d10a      	bne.n	8002eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  }
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ef6:	f7fd fb5b 	bl	80005b0 <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d10e      	bne.n	8002f28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f82a 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e020      	b.n	8002f6a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d10e      	bne.n	8002f54 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f814 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e00a      	b.n	8002f6a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f82:	e02a      	b.n	8002fda <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f8a:	d026      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8c:	f7fd fb10 	bl	80005b0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11b      	bne.n	8002fda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fb0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e00f      	b.n	8002ffa <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d0c5      	beq.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003018:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fbb1 	bl	80037c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	2b21      	cmp	r3, #33	; 0x21
 800307c:	d12b      	bne.n	80030d6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d110      	bne.n	80030ac <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80030aa:	e014      	b.n	80030d6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b292      	uxth	r2, r2
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	2b21      	cmp	r3, #33	; 0x21
 80030f0:	d12f      	bne.n	8003152 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d110      	bne.n	8003120 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800311e:	e018      	b.n	8003152 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	881a      	ldrh	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003132:	b292      	uxth	r2, r2
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	1c9a      	adds	r2, r3, #2
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003174:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fb04 	bl	8003790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800319e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a4:	2b22      	cmp	r3, #34	; 0x22
 80031a6:	d13a      	bne.n	800321e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031ae:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031b0:	89bb      	ldrh	r3, [r7, #12]
 80031b2:	b2d9      	uxtb	r1, r3
 80031b4:	89fb      	ldrh	r3, [r7, #14]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	400a      	ands	r2, r1
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d123      	bne.n	8003232 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa96 	bl	8003748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800321c:	e009      	b.n	8003232 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	8b1b      	ldrh	r3, [r3, #24]
 8003224:	b29a      	uxth	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	b292      	uxth	r2, r2
 8003230:	831a      	strh	r2, [r3, #24]
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003248:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324e:	2b22      	cmp	r3, #34	; 0x22
 8003250:	d13a      	bne.n	80032c8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003258:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003260:	89ba      	ldrh	r2, [r7, #12]
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	4013      	ands	r3, r2
 8003266:	b29a      	uxth	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	1c9a      	adds	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d123      	bne.n	80032dc <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032a2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fa41 	bl	8003748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032c6:	e009      	b.n	80032dc <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	8b1b      	ldrh	r3, [r3, #24]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0208 	orr.w	r2, r2, #8
 80032d8:	b292      	uxth	r2, r2
 80032da:	831a      	strh	r2, [r3, #24]
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800330e:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <MX_GPIO_Init+0xc4>)
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	4a2a      	ldr	r2, [pc, #168]	; (80033bc <MX_GPIO_Init+0xc4>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800331a:	4b28      	ldr	r3, [pc, #160]	; (80033bc <MX_GPIO_Init+0xc4>)
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003326:	4b25      	ldr	r3, [pc, #148]	; (80033bc <MX_GPIO_Init+0xc4>)
 8003328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332a:	4a24      	ldr	r2, [pc, #144]	; (80033bc <MX_GPIO_Init+0xc4>)
 800332c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <MX_GPIO_Init+0xc4>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <MX_GPIO_Init+0xc4>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <MX_GPIO_Init+0xc4>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <MX_GPIO_Init+0xc4>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <MX_GPIO_Init+0xc4>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4a18      	ldr	r2, [pc, #96]	; (80033bc <MX_GPIO_Init+0xc4>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <MX_GPIO_Init+0xc4>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800336e:	2200      	movs	r2, #0
 8003370:	2120      	movs	r1, #32
 8003372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003376:	f7fd fc43 	bl	8000c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800337a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800337e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <MX_GPIO_Init+0xc8>)
 8003382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	4619      	mov	r1, r3
 800338e:	480d      	ldr	r0, [pc, #52]	; (80033c4 <MX_GPIO_Init+0xcc>)
 8003390:	f7fd fa8e 	bl	80008b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003394:	2320      	movs	r3, #32
 8003396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003398:	2301      	movs	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	4619      	mov	r1, r3
 80033aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ae:	f7fd fa7f 	bl	80008b0 <HAL_GPIO_Init>

}
 80033b2:	bf00      	nop
 80033b4:	3728      	adds	r7, #40	; 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	10210000 	.word	0x10210000
 80033c4:	48000800 	.word	0x48000800

080033c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t opt = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	717b      	strb	r3, [r7, #5]
	uint8_t opt2 = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	713b      	strb	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033d6:	f7fd f87f 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033da:	f000 f919 	bl	8003610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033de:	f7ff ff8b 	bl	80032f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80033e2:	f000 fbef 	bl	8003bc4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80033e6:	f000 fc1d 	bl	8003c24 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80033ea:	f000 fbbb 	bl	8003b64 <MX_USART1_UART_Init>
  //HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(USART3_IRQn);


  //printMessage:
  	  printWelcomeMessage();
 80033ee:	f000 f9ff 	bl	80037f0 <printWelcomeMessage>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80033f2:	2201      	movs	r2, #1
 80033f4:	2120      	movs	r1, #32
 80033f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033fa:	f7fd fc01 	bl	8000c00 <HAL_GPIO_WritePin>
  	  HAL_Delay(10000);
 80033fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8003402:	f7fd f8e1 	bl	80005c8 <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8003406:	2200      	movs	r2, #0
 8003408:	2120      	movs	r1, #32
 800340a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800340e:	f7fd fbf7 	bl	8000c00 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart1, (uint8_t*)readBuf, 1);
 8003412:	2201      	movs	r2, #1
 8003414:	4974      	ldr	r1, [pc, #464]	; (80035e8 <main+0x220>)
 8003416:	4875      	ldr	r0, [pc, #468]	; (80035ec <main+0x224>)
 8003418:	f7fe ff96 	bl	8002348 <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */
	  //opt = readUserInput();

	  
	  if(UartReadyRx2 == SET){
 800341c:	4b74      	ldr	r3, [pc, #464]	; (80035f0 <main+0x228>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d16f      	bne.n	8003506 <main+0x13e>
		UartReadyRx2 = RESET;
 8003426:	4b72      	ldr	r3, [pc, #456]	; (80035f0 <main+0x228>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]

		if(readBuf[0]=='\r'){
 800342c:	4b6e      	ldr	r3, [pc, #440]	; (80035e8 <main+0x220>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b0d      	cmp	r3, #13
 8003432:	d14f      	bne.n	80034d4 <main+0x10c>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003434:	2120      	movs	r1, #32
 8003436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343a:	f7fd fbf9 	bl	8000c30 <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
			command[cntcmd]=readBuf[0];
 800343e:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <main+0x22c>)
 8003440:	f993 3000 	ldrsb.w	r3, [r3]
 8003444:	461a      	mov	r2, r3
 8003446:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <main+0x220>)
 8003448:	7819      	ldrb	r1, [r3, #0]
 800344a:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <main+0x230>)
 800344c:	5499      	strb	r1, [r3, r2]
			cntcmd++;
 800344e:	4b69      	ldr	r3, [pc, #420]	; (80035f4 <main+0x22c>)
 8003450:	f993 3000 	ldrsb.w	r3, [r3]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	3301      	adds	r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	b25a      	sxtb	r2, r3
 800345c:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <main+0x22c>)
 800345e:	701a      	strb	r2, [r3, #0]
			command[cntcmd]='\n';
 8003460:	4b64      	ldr	r3, [pc, #400]	; (80035f4 <main+0x22c>)
 8003462:	f993 3000 	ldrsb.w	r3, [r3]
 8003466:	461a      	mov	r2, r3
 8003468:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <main+0x230>)
 800346a:	210a      	movs	r1, #10
 800346c:	5499      	strb	r1, [r3, r2]
			readBuf[0]=0;
 800346e:	4b5e      	ldr	r3, [pc, #376]	; (80035e8 <main+0x220>)
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
			//UART_Transmit(&huart1, (uint8_t*)newline, strlen(newline));
			//while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX_RX);

			//HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
			//HAL_UART_Transmit(&huart3, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
			UART_Transmit(&huart3, (uint8_t*)command, cntcmd);
 8003474:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <main+0x22c>)
 8003476:	f993 3000 	ldrsb.w	r3, [r3]
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	495e      	ldr	r1, [pc, #376]	; (80035f8 <main+0x230>)
 8003480:	485e      	ldr	r0, [pc, #376]	; (80035fc <main+0x234>)
 8003482:	f000 f93f 	bl	8003704 <UART_Transmit>
			while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX_RX);
 8003486:	bf00      	nop
 8003488:	485c      	ldr	r0, [pc, #368]	; (80035fc <main+0x234>)
 800348a:	f7ff f92f 	bl	80026ec <HAL_UART_GetState>
 800348e:	4603      	mov	r3, r0
 8003490:	2b21      	cmp	r3, #33	; 0x21
 8003492:	d0f9      	beq.n	8003488 <main+0xc0>
 8003494:	4859      	ldr	r0, [pc, #356]	; (80035fc <main+0x234>)
 8003496:	f7ff f929 	bl	80026ec <HAL_UART_GetState>
 800349a:	4603      	mov	r3, r0
 800349c:	2b23      	cmp	r3, #35	; 0x23
 800349e:	d0f3      	beq.n	8003488 <main+0xc0>
			//UART_Transmit(&huart3, (uint8_t*)newline, strlen(newline));
			//while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX_RX);
			//Enter Reception Mode For UART3

			HAL_UART_Receive_IT(&huart3, (uint8_t*)readBuf2, 1);
 80034a0:	2201      	movs	r2, #1
 80034a2:	4957      	ldr	r1, [pc, #348]	; (8003600 <main+0x238>)
 80034a4:	4855      	ldr	r0, [pc, #340]	; (80035fc <main+0x234>)
 80034a6:	f7fe ff4f 	bl	8002348 <HAL_UART_Receive_IT>
			cntcmd = 0;
 80034aa:	4b52      	ldr	r3, [pc, #328]	; (80035f4 <main+0x22c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
			for (int8_t i = 0; i < sizeof(command)/sizeof(command[0]); i++){
 80034b0:	2300      	movs	r3, #0
 80034b2:	71fb      	strb	r3, [r7, #7]
 80034b4:	e00a      	b.n	80034cc <main+0x104>
				command[i] = 0;
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <main+0x230>)
 80034bc:	2100      	movs	r1, #0
 80034be:	54d1      	strb	r1, [r2, r3]
			for (int8_t i = 0; i < sizeof(command)/sizeof(command[0]); i++){
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	71fb      	strb	r3, [r7, #7]
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	2b3f      	cmp	r3, #63	; 0x3f
 80034d0:	d9f1      	bls.n	80034b6 <main+0xee>
 80034d2:	e018      	b.n	8003506 <main+0x13e>
			}
		}else {
			command[cntcmd]=readBuf[0];
 80034d4:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <main+0x22c>)
 80034d6:	f993 3000 	ldrsb.w	r3, [r3]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b42      	ldr	r3, [pc, #264]	; (80035e8 <main+0x220>)
 80034de:	7819      	ldrb	r1, [r3, #0]
 80034e0:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <main+0x230>)
 80034e2:	5499      	strb	r1, [r3, r2]
			cntcmd++;
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <main+0x22c>)
 80034e6:	f993 3000 	ldrsb.w	r3, [r3]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	b25a      	sxtb	r2, r3
 80034f2:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <main+0x22c>)
 80034f4:	701a      	strb	r2, [r3, #0]
			readBuf[0]=0;
 80034f6:	4b3c      	ldr	r3, [pc, #240]	; (80035e8 <main+0x220>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, (uint8_t*)readBuf, 1);
 80034fc:	2201      	movs	r2, #1
 80034fe:	493a      	ldr	r1, [pc, #232]	; (80035e8 <main+0x220>)
 8003500:	483a      	ldr	r0, [pc, #232]	; (80035ec <main+0x224>)
 8003502:	f7fe ff21 	bl	8002348 <HAL_UART_Receive_IT>

		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	  }

	if(UartReadyRx3 == SET){
 8003506:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <main+0x23c>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d185      	bne.n	800341c <main+0x54>
		UartReadyRx3 = RESET;
 8003510:	4b3c      	ldr	r3, [pc, #240]	; (8003604 <main+0x23c>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
		if(readBuf2[0]== '#'){
 8003516:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <main+0x238>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b23      	cmp	r3, #35	; 0x23
 800351c:	d14a      	bne.n	80035b4 <main+0x1ec>
			command2[cntcmd2]=readBuf2[0];
 800351e:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <main+0x240>)
 8003520:	f993 3000 	ldrsb.w	r3, [r3]
 8003524:	461a      	mov	r2, r3
 8003526:	4b36      	ldr	r3, [pc, #216]	; (8003600 <main+0x238>)
 8003528:	7819      	ldrb	r1, [r3, #0]
 800352a:	4b38      	ldr	r3, [pc, #224]	; (800360c <main+0x244>)
 800352c:	5499      	strb	r1, [r3, r2]
			cntcmd2++;
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <main+0x240>)
 8003530:	f993 3000 	ldrsb.w	r3, [r3]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3301      	adds	r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	b25a      	sxtb	r2, r3
 800353c:	4b32      	ldr	r3, [pc, #200]	; (8003608 <main+0x240>)
 800353e:	701a      	strb	r2, [r3, #0]
			command2[cntcmd2]='\n';
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <main+0x240>)
 8003542:	f993 3000 	ldrsb.w	r3, [r3]
 8003546:	461a      	mov	r2, r3
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <main+0x244>)
 800354a:	210a      	movs	r1, #10
 800354c:	5499      	strb	r1, [r3, r2]
			readBuf2[0]=0;
 800354e:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <main+0x238>)
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
			//uartrxcnt++;

			UART_Transmit(&huart1, (uint8_t*)command2, cntcmd2);
 8003554:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <main+0x240>)
 8003556:	f993 3000 	ldrsb.w	r3, [r3]
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	492b      	ldr	r1, [pc, #172]	; (800360c <main+0x244>)
 8003560:	4822      	ldr	r0, [pc, #136]	; (80035ec <main+0x224>)
 8003562:	f000 f8cf 	bl	8003704 <UART_Transmit>
			while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX_RX);
 8003566:	bf00      	nop
 8003568:	4820      	ldr	r0, [pc, #128]	; (80035ec <main+0x224>)
 800356a:	f7ff f8bf 	bl	80026ec <HAL_UART_GetState>
 800356e:	4603      	mov	r3, r0
 8003570:	2b21      	cmp	r3, #33	; 0x21
 8003572:	d0f9      	beq.n	8003568 <main+0x1a0>
 8003574:	481d      	ldr	r0, [pc, #116]	; (80035ec <main+0x224>)
 8003576:	f7ff f8b9 	bl	80026ec <HAL_UART_GetState>
 800357a:	4603      	mov	r3, r0
 800357c:	2b23      	cmp	r3, #35	; 0x23
 800357e:	d0f3      	beq.n	8003568 <main+0x1a0>
			//UART_Transmit(&huart1, (uint8_t*)newline, strlen(newline));
			//while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX_RX);
			//RETURN TO RX MODE FOR UART2

			//if(uartrxcnt==2){
			HAL_UART_Receive_IT(&huart1, (uint8_t*)readBuf, 1);
 8003580:	2201      	movs	r2, #1
 8003582:	4919      	ldr	r1, [pc, #100]	; (80035e8 <main+0x220>)
 8003584:	4819      	ldr	r0, [pc, #100]	; (80035ec <main+0x224>)
 8003586:	f7fe fedf 	bl	8002348 <HAL_UART_Receive_IT>
			//	uartrxcnt=0;
			//}else{
			//HAL_UART_Receive_IT(&huart3, (uint8_t*)readBuf, 1);
			//}
			cntcmd2 = 0;
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <main+0x240>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
			for (int8_t i = 0; i < sizeof(command2)/sizeof(command2[0]); i++){
 8003590:	2300      	movs	r3, #0
 8003592:	71bb      	strb	r3, [r7, #6]
 8003594:	e00a      	b.n	80035ac <main+0x1e4>
				command2[i] = 0;
 8003596:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800359a:	4a1c      	ldr	r2, [pc, #112]	; (800360c <main+0x244>)
 800359c:	2100      	movs	r1, #0
 800359e:	54d1      	strb	r1, [r2, r3]
			for (int8_t i = 0; i < sizeof(command2)/sizeof(command2[0]); i++){
 80035a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	71bb      	strb	r3, [r7, #6]
 80035ac:	79bb      	ldrb	r3, [r7, #6]
 80035ae:	2b3f      	cmp	r3, #63	; 0x3f
 80035b0:	d9f1      	bls.n	8003596 <main+0x1ce>
 80035b2:	e733      	b.n	800341c <main+0x54>
			}
		}else {
			command2[cntcmd2]=readBuf2[0];
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <main+0x240>)
 80035b6:	f993 3000 	ldrsb.w	r3, [r3]
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <main+0x238>)
 80035be:	7819      	ldrb	r1, [r3, #0]
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <main+0x244>)
 80035c2:	5499      	strb	r1, [r3, r2]
			cntcmd2++;
 80035c4:	4b10      	ldr	r3, [pc, #64]	; (8003608 <main+0x240>)
 80035c6:	f993 3000 	ldrsb.w	r3, [r3]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	b25a      	sxtb	r2, r3
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <main+0x240>)
 80035d4:	701a      	strb	r2, [r3, #0]
			readBuf2[0]=0;
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <main+0x238>)
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, (uint8_t*)readBuf2, 1);
 80035dc:	2201      	movs	r2, #1
 80035de:	4908      	ldr	r1, [pc, #32]	; (8003600 <main+0x238>)
 80035e0:	4806      	ldr	r0, [pc, #24]	; (80035fc <main+0x234>)
 80035e2:	f7fe feb1 	bl	8002348 <HAL_UART_Receive_IT>
	  if(UartReadyRx2 == SET){
 80035e6:	e719      	b.n	800341c <main+0x54>
 80035e8:	200008a0 	.word	0x200008a0
 80035ec:	20000924 	.word	0x20000924
 80035f0:	20000008 	.word	0x20000008
 80035f4:	2000002c 	.word	0x2000002c
 80035f8:	20000048 	.word	0x20000048
 80035fc:	200008a4 	.word	0x200008a4
 8003600:	20000038 	.word	0x20000038
 8003604:	20000009 	.word	0x20000009
 8003608:	2000002d 	.word	0x2000002d
 800360c:	20000860 	.word	0x20000860

08003610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b0b8      	sub	sp, #224	; 0xe0
 8003614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003616:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800361a:	2244      	movs	r2, #68	; 0x44
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fc3e 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003624:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003634:	463b      	mov	r3, r7
 8003636:	2288      	movs	r2, #136	; 0x88
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fc30 	bl	8003ea0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003640:	2302      	movs	r3, #2
 8003642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800364a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800364e:	2310      	movs	r3, #16
 8003650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003654:	2302      	movs	r3, #2
 8003656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800365a:	2302      	movs	r3, #2
 800365c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003660:	2301      	movs	r3, #1
 8003662:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003666:	230a      	movs	r3, #10
 8003668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800366c:	2307      	movs	r3, #7
 800366e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003672:	2302      	movs	r3, #2
 8003674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003678:	2302      	movs	r3, #2
 800367a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800367e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fb52 	bl	8000d2c <HAL_RCC_OscConfig>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800368e:	f000 f8ef 	bl	8003870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003692:	230f      	movs	r3, #15
 8003694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003698:	2303      	movs	r3, #3
 800369a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80036b4:	2104      	movs	r1, #4
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fee8 	bl	800148c <HAL_RCC_ClockConfig>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80036c2:	f000 f8d5 	bl	8003870 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80036c6:	2307      	movs	r3, #7
 80036c8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80036ca:	2300      	movs	r3, #0
 80036cc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036ce:	2300      	movs	r3, #0
 80036d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80036d2:	2300      	movs	r3, #0
 80036d4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036d6:	463b      	mov	r3, r7
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe f8db 	bl	8001894 <HAL_RCCEx_PeriphCLKConfig>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80036e4:	f000 f8c4 	bl	8003870 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80036e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036ec:	f7fd fac8 	bl	8000c80 <HAL_PWREx_ControlVoltageScaling>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80036f6:	f000 f8bb 	bl	8003870 <Error_Handler>
  }
}
 80036fa:	bf00      	nop
 80036fc:	37e0      	adds	r7, #224	; 0xe0
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <UART_Transmit>:

/* USER CODE BEGIN 4 */

uint8_t UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t len) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  if(HAL_UART_Transmit_IT(huart, pData, len) != HAL_OK) {
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	461a      	mov	r2, r3
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7fe fdb9 	bl	8002290 <HAL_UART_Transmit_IT>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <UART_Transmit+0x36>
    if(RingBuffer_Write(&txBuf, pData, len) != RING_BUFFER_OK)
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	461a      	mov	r2, r3
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4806      	ldr	r0, [pc, #24]	; (8003744 <UART_Transmit+0x40>)
 800372c:	f000 f930 	bl	8003990 <RingBuffer_Write>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <UART_Transmit+0x36>
      return 0;
 8003736:	2300      	movs	r3, #0
 8003738:	e000      	b.n	800373c <UART_Transmit+0x38>
  }
  return 1;
 800373a:	2301      	movs	r3, #1
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000088 	.word	0x20000088

08003748 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

	if(UartHandle->Instance==USART1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <HAL_UART_RxCpltCallback+0x38>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d103      	bne.n	8003762 <HAL_UART_RxCpltCallback+0x1a>
	 {
		UartReadyRx2 = SET;
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HAL_UART_RxCpltCallback+0x3c>)
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]

	 }else if(UartHandle->Instance==USART3)
	 {
		UartReadyRx3 = SET;
	 }
}
 8003760:	e007      	b.n	8003772 <HAL_UART_RxCpltCallback+0x2a>
	 }else if(UartHandle->Instance==USART3)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <HAL_UART_RxCpltCallback+0x40>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d102      	bne.n	8003772 <HAL_UART_RxCpltCallback+0x2a>
		UartReadyRx3 = SET;
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <HAL_UART_RxCpltCallback+0x44>)
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40013800 	.word	0x40013800
 8003784:	20000008 	.word	0x20000008
 8003788:	40004800 	.word	0x40004800
 800378c:	20000009 	.word	0x20000009

08003790 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

		if(RingBuffer_GetDataLength(&txBuf) > 0) {
 8003798:	4809      	ldr	r0, [pc, #36]	; (80037c0 <HAL_UART_TxCpltCallback+0x30>)
 800379a:	f000 f8a8 	bl	80038ee <RingBuffer_GetDataLength>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <HAL_UART_TxCpltCallback+0x28>
			RingBuffer_Read(&txBuf, &txData, 1);
 80037a4:	2201      	movs	r2, #1
 80037a6:	4907      	ldr	r1, [pc, #28]	; (80037c4 <HAL_UART_TxCpltCallback+0x34>)
 80037a8:	4805      	ldr	r0, [pc, #20]	; (80037c0 <HAL_UART_TxCpltCallback+0x30>)
 80037aa:	f000 f8b1 	bl	8003910 <RingBuffer_Read>
			HAL_UART_Transmit_IT(huart, &txData, 1);
 80037ae:	2201      	movs	r2, #1
 80037b0:	4904      	ldr	r1, [pc, #16]	; (80037c4 <HAL_UART_TxCpltCallback+0x34>)
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fe fd6c 	bl	8002290 <HAL_UART_Transmit_IT>
		}


}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000088 	.word	0x20000088
 80037c4:	20000034 	.word	0x20000034

080037c8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if(huart->ErrorCode == HAL_UART_ERROR_ORE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d104      	bne.n	80037e2 <HAL_UART_ErrorCallback+0x1a>
    HAL_UART_Receive_IT(huart, (uint8_t *)readBuf, 1);
 80037d8:	2201      	movs	r2, #1
 80037da:	4904      	ldr	r1, [pc, #16]	; (80037ec <HAL_UART_ErrorCallback+0x24>)
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7fe fdb3 	bl	8002348 <HAL_UART_Receive_IT>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200008a0 	.word	0x200008a0

080037f0 <printWelcomeMessage>:

void printWelcomeMessage(void) {
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
	char *strings[] = {"\033[0;0H", "\033[2J", WELCOME_MSG, MAIN_MENU, PROMPT};
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <printWelcomeMessage+0x78>)
 80037f8:	463c      	mov	r4, r7
 80037fa:	461d      	mov	r5, r3
 80037fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	6023      	str	r3, [r4, #0]

	for (uint8_t i = 0; i < 5; i++) {
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]
 8003808:	e027      	b.n	800385a <printWelcomeMessage+0x6a>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)strings[i], strlen(strings[i]));
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	f107 0218 	add.w	r2, r7, #24
 8003812:	4413      	add	r3, r2
 8003814:	f853 4c18 	ldr.w	r4, [r3, #-24]
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	f107 0218 	add.w	r2, r7, #24
 8003820:	4413      	add	r3, r2
 8003822:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fcce 	bl	80001c8 <strlen>
 800382c:	4603      	mov	r3, r0
 800382e:	b29b      	uxth	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	4621      	mov	r1, r4
 8003834:	480d      	ldr	r0, [pc, #52]	; (800386c <printWelcomeMessage+0x7c>)
 8003836:	f7fe fd2b 	bl	8002290 <HAL_UART_Transmit_IT>
		while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX_RX);
 800383a:	bf00      	nop
 800383c:	480b      	ldr	r0, [pc, #44]	; (800386c <printWelcomeMessage+0x7c>)
 800383e:	f7fe ff55 	bl	80026ec <HAL_UART_GetState>
 8003842:	4603      	mov	r3, r0
 8003844:	2b21      	cmp	r3, #33	; 0x21
 8003846:	d0f9      	beq.n	800383c <printWelcomeMessage+0x4c>
 8003848:	4808      	ldr	r0, [pc, #32]	; (800386c <printWelcomeMessage+0x7c>)
 800384a:	f7fe ff4f 	bl	80026ec <HAL_UART_GetState>
 800384e:	4603      	mov	r3, r0
 8003850:	2b23      	cmp	r3, #35	; 0x23
 8003852:	d0f3      	beq.n	800383c <printWelcomeMessage+0x4c>
	for (uint8_t i = 0; i < 5; i++) {
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	3301      	adds	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d9d4      	bls.n	800380a <printWelcomeMessage+0x1a>
	}
}
 8003860:	bf00      	nop
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bdb0      	pop	{r4, r5, r7, pc}
 8003868:	08003f90 	.word	0x08003f90
 800386c:	20000924 	.word	0x20000924

08003870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */

	while(1)
	  {
	    /* Toggle LED2 for error */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003874:	2120      	movs	r1, #32
 8003876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800387a:	f7fd f9d9 	bl	8000c30 <HAL_GPIO_TogglePin>
	    HAL_Delay(500);
 800387e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003882:	f7fc fea1 	bl	80005c8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003886:	e7f5      	b.n	8003874 <Error_Handler+0x4>

08003888 <RingBuffer_GetFreeSpace>:
#include "ringbuffer.h"
#include <string.h>

uint16_t RingBuffer_GetFreeSpace(RingBuffer *buf) {
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	if(buf->tail == buf->head)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 800389c:	429a      	cmp	r2, r3
 800389e:	d102      	bne.n	80038a6 <RingBuffer_GetFreeSpace+0x1e>
		return RING_BUFFER_LENGTH - 1;
 80038a0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80038a4:	e01d      	b.n	80038e2 <RingBuffer_GetFreeSpace+0x5a>

	if(buf->head > buf->tail)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8b3 23e8 	ldrh.w	r2, [r3, #1000]	; 0x3e8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d90b      	bls.n	80038ce <RingBuffer_GetFreeSpace+0x46>
		return RING_BUFFER_LENGTH - ((buf->head - buf->tail) + 1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	e009      	b.n	80038e2 <RingBuffer_GetFreeSpace+0x5a>
	else
		return  (buf->tail - buf->head) - 1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29b      	uxth	r3, r3
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <RingBuffer_GetDataLength>:

uint16_t RingBuffer_GetDataLength(RingBuffer *buf) {
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
	return RING_BUFFER_LENGTH - (RingBuffer_GetFreeSpace(buf) + 1);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ffc6 	bl	8003888 <RingBuffer_GetFreeSpace>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8003902:	3303      	adds	r3, #3
 8003904:	b29b      	uxth	r3, r3
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <RingBuffer_Read>:
void RingBuffer_Init(RingBuffer *buf) {
	buf->head = buf->tail = 0;
	memset(buf->buf, 0, RING_BUFFER_LENGTH);
}

uint16_t RingBuffer_Read(RingBuffer *buf, uint8_t *data, uint16_t len) {
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	82fb      	strh	r3, [r7, #22]

	while(buf->tail != buf->head && counter < len) {
 8003922:	e01f      	b.n	8003964 <RingBuffer_Read+0x54>
		data[counter++] = buf->buf[buf->tail];
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 800392a:	4619      	mov	r1, r3
 800392c:	8afb      	ldrh	r3, [r7, #22]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	82fa      	strh	r2, [r7, #22]
 8003932:	461a      	mov	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4413      	add	r3, r2
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	5c52      	ldrb	r2, [r2, r1]
 800393c:	701a      	strb	r2, [r3, #0]
		buf->tail = (buf->tail + 1) % RING_BUFFER_LENGTH;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 8003944:	3301      	adds	r3, #1
 8003946:	4a11      	ldr	r2, [pc, #68]	; (800398c <RingBuffer_Read+0x7c>)
 8003948:	fb82 1203 	smull	r1, r2, r2, r3
 800394c:	1191      	asrs	r1, r2, #6
 800394e:	17da      	asrs	r2, r3, #31
 8003950:	1a8a      	subs	r2, r1, r2
 8003952:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003956:	fb01 f202 	mul.w	r2, r1, r2
 800395a:	1a9a      	subs	r2, r3, r2
 800395c:	b292      	uxth	r2, r2
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
	while(buf->tail != buf->head && counter < len) {
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8003970:	429a      	cmp	r2, r3
 8003972:	d003      	beq.n	800397c <RingBuffer_Read+0x6c>
 8003974:	8afa      	ldrh	r2, [r7, #22]
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	429a      	cmp	r2, r3
 800397a:	d3d3      	bcc.n	8003924 <RingBuffer_Read+0x14>
	}
	return counter;
 800397c:	8afb      	ldrh	r3, [r7, #22]
}
 800397e:	4618      	mov	r0, r3
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	10624dd3 	.word	0x10624dd3

08003990 <RingBuffer_Write>:

uint8_t RingBuffer_Write(RingBuffer *buf, uint8_t *data, uint16_t len) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	82fb      	strh	r3, [r7, #22]
	uint16_t freeSpace = RingBuffer_GetFreeSpace(buf);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff ff70 	bl	8003888 <RingBuffer_GetFreeSpace>
 80039a8:	4603      	mov	r3, r0
 80039aa:	82bb      	strh	r3, [r7, #20]

	if(freeSpace == 0)
 80039ac:	8abb      	ldrh	r3, [r7, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <RingBuffer_Write+0x26>
		return RING_BUFFER_FULL;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e029      	b.n	8003a0a <RingBuffer_Write+0x7a>
	else if (freeSpace < len)
 80039b6:	8aba      	ldrh	r2, [r7, #20]
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d220      	bcs.n	8003a00 <RingBuffer_Write+0x70>
		return RING_BUFFER_NO_SUFFICIENT_SPACE;
 80039be:	2302      	movs	r3, #2
 80039c0:	e023      	b.n	8003a0a <RingBuffer_Write+0x7a>

	while(counter < len) {
		buf->buf[buf->head] = data[counter++];
 80039c2:	8afb      	ldrh	r3, [r7, #22]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	82fa      	strh	r2, [r7, #22]
 80039c8:	461a      	mov	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4413      	add	r3, r2
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
 80039d4:	7819      	ldrb	r1, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	5499      	strb	r1, [r3, r2]
		buf->head = (buf->head + 1) % RING_BUFFER_LENGTH;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 80039e0:	3301      	adds	r3, #1
 80039e2:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <RingBuffer_Write+0x84>)
 80039e4:	fb82 1203 	smull	r1, r2, r2, r3
 80039e8:	1191      	asrs	r1, r2, #6
 80039ea:	17da      	asrs	r2, r3, #31
 80039ec:	1a8a      	subs	r2, r1, r2
 80039ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039f2:	fb01 f202 	mul.w	r2, r1, r2
 80039f6:	1a9a      	subs	r2, r3, r2
 80039f8:	b292      	uxth	r2, r2
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
	while(counter < len) {
 8003a00:	8afa      	ldrh	r2, [r7, #22]
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d3dc      	bcc.n	80039c2 <RingBuffer_Write+0x32>
	}
 	return RING_BUFFER_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	10624dd3 	.word	0x10624dd3

08003a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <HAL_MspInit+0x44>)
 8003a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a22:	4a0e      	ldr	r2, [pc, #56]	; (8003a5c <HAL_MspInit+0x44>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6613      	str	r3, [r2, #96]	; 0x60
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_MspInit+0x44>)
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_MspInit+0x44>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <HAL_MspInit+0x44>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_MspInit+0x44>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000

08003a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <HardFault_Handler+0x4>

08003a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <MemManage_Handler+0x4>

08003a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a7e:	e7fe      	b.n	8003a7e <BusFault_Handler+0x4>

08003a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a84:	e7fe      	b.n	8003a84 <UsageFault_Handler+0x4>

08003a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ab4:	f7fc fd6a 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab8:	bf00      	nop
 8003aba:	bd80      	pop	{r7, pc}

08003abc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <USART1_IRQHandler+0x10>)
 8003ac2:	f7fe fce3 	bl	800248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000924 	.word	0x20000924

08003ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <USART2_IRQHandler+0x10>)
 8003ad6:	f7fe fcd9 	bl	800248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200009a4 	.word	0x200009a4

08003ae4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <USART3_IRQHandler+0x10>)
 8003aea:	f7fe fccf 	bl	800248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200008a4 	.word	0x200008a4

08003af8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003afc:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <SystemInit+0x64>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <SystemInit+0x64>)
 8003b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <SystemInit+0x68>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <SystemInit+0x68>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <SystemInit+0x68>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <SystemInit+0x68>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <SystemInit+0x68>)
 8003b24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003b28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <SystemInit+0x68>)
 8003b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <SystemInit+0x68>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <SystemInit+0x68>)
 8003b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <SystemInit+0x68>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <SystemInit+0x64>)
 8003b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b4e:	609a      	str	r2, [r3, #8]
#endif
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000ed00 	.word	0xe000ed00
 8003b60:	40021000 	.word	0x40021000

08003b64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003b68:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <MX_USART1_UART_Init+0x5c>)
 8003b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b82:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003b8a:	220c      	movs	r2, #12
 8003b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ba6:	4805      	ldr	r0, [pc, #20]	; (8003bbc <MX_USART1_UART_Init+0x58>)
 8003ba8:	f7fe fb24 	bl	80021f4 <HAL_UART_Init>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003bb2:	f7ff fe5d 	bl	8003870 <Error_Handler>
  }

}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000924 	.word	0x20000924
 8003bc0:	40013800 	.word	0x40013800

08003bc4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003bc8:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003bca:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <MX_USART2_UART_Init+0x5c>)
 8003bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003bea:	220c      	movs	r2, #12
 8003bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c06:	4805      	ldr	r0, [pc, #20]	; (8003c1c <MX_USART2_UART_Init+0x58>)
 8003c08:	f7fe faf4 	bl	80021f4 <HAL_UART_Init>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c12:	f7ff fe2d 	bl	8003870 <Error_Handler>
  }

}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200009a4 	.word	0x200009a4
 8003c20:	40004400 	.word	0x40004400

08003c24 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c2a:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <MX_USART3_UART_Init+0x5c>)
 8003c2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c42:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c4a:	220c      	movs	r2, #12
 8003c4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c66:	4805      	ldr	r0, [pc, #20]	; (8003c7c <MX_USART3_UART_Init+0x58>)
 8003c68:	f7fe fac4 	bl	80021f4 <HAL_UART_Init>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003c72:	f7ff fdfd 	bl	8003870 <Error_Handler>
  }

}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200008a4 	.word	0x200008a4
 8003c80:	40004800 	.word	0x40004800

08003c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	; 0x38
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a53      	ldr	r2, [pc, #332]	; (8003df0 <HAL_UART_MspInit+0x16c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d132      	bne.n	8003d0c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ca6:	4b53      	ldr	r3, [pc, #332]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	4a52      	ldr	r2, [pc, #328]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8003cb2:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cbe:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	4a4c      	ldr	r2, [pc, #304]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cca:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ce8:	2307      	movs	r3, #7
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cf6:	f7fc fddb 	bl	80008b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	2025      	movs	r0, #37	; 0x25
 8003d00:	f7fc fd5f 	bl	80007c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d04:	2025      	movs	r0, #37	; 0x25
 8003d06:	f7fc fd78 	bl	80007fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003d0a:	e06c      	b.n	8003de6 <HAL_UART_MspInit+0x162>
  else if(uartHandle->Instance==USART2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a39      	ldr	r2, [pc, #228]	; (8003df8 <HAL_UART_MspInit+0x174>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d131      	bne.n	8003d7a <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	4a36      	ldr	r2, [pc, #216]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d20:	6593      	str	r3, [r2, #88]	; 0x58
 8003d22:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2e:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d32:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d46:	230c      	movs	r3, #12
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d52:	2303      	movs	r3, #3
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d56:	2307      	movs	r3, #7
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d64:	f7fc fda4 	bl	80008b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	2026      	movs	r0, #38	; 0x26
 8003d6e:	f7fc fd28 	bl	80007c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d72:	2026      	movs	r0, #38	; 0x26
 8003d74:	f7fc fd41 	bl	80007fa <HAL_NVIC_EnableIRQ>
}
 8003d78:	e035      	b.n	8003de6 <HAL_UART_MspInit+0x162>
  else if(uartHandle->Instance==USART3)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1f      	ldr	r2, [pc, #124]	; (8003dfc <HAL_UART_MspInit+0x178>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d130      	bne.n	8003de6 <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da0:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <HAL_UART_MspInit+0x170>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003db4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003dc6:	2307      	movs	r3, #7
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dce:	4619      	mov	r1, r3
 8003dd0:	480b      	ldr	r0, [pc, #44]	; (8003e00 <HAL_UART_MspInit+0x17c>)
 8003dd2:	f7fc fd6d 	bl	80008b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2100      	movs	r1, #0
 8003dda:	2027      	movs	r0, #39	; 0x27
 8003ddc:	f7fc fcf1 	bl	80007c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003de0:	2027      	movs	r0, #39	; 0x27
 8003de2:	f7fc fd0a 	bl	80007fa <HAL_NVIC_EnableIRQ>
}
 8003de6:	bf00      	nop
 8003de8:	3738      	adds	r7, #56	; 0x38
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40013800 	.word	0x40013800
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40004400 	.word	0x40004400
 8003dfc:	40004800 	.word	0x40004800
 8003e00:	48000800 	.word	0x48000800

08003e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003e08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003e0a:	e003      	b.n	8003e14 <LoopCopyDataInit>

08003e0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003e0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003e10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003e12:	3104      	adds	r1, #4

08003e14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003e14:	480b      	ldr	r0, [pc, #44]	; (8003e44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003e18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003e1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003e1c:	d3f6      	bcc.n	8003e0c <CopyDataInit>
	ldr	r2, =_sbss
 8003e1e:	4a0b      	ldr	r2, [pc, #44]	; (8003e4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003e20:	e002      	b.n	8003e28 <LoopFillZerobss>

08003e22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003e22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003e24:	f842 3b04 	str.w	r3, [r2], #4

08003e28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <LoopForever+0x16>)
	cmp	r2, r3
 8003e2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003e2c:	d3f9      	bcc.n	8003e22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e2e:	f7ff fe63 	bl	8003af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e32:	f000 f811 	bl	8003e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e36:	f7ff fac7 	bl	80033c8 <main>

08003e3a <LoopForever>:

LoopForever:
    b LoopForever
 8003e3a:	e7fe      	b.n	8003e3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e3c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003e40:	08003ffc 	.word	0x08003ffc
	ldr	r0, =_sdata
 8003e44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e48:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8003e4c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8003e50:	20000a24 	.word	0x20000a24

08003e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e54:	e7fe      	b.n	8003e54 <ADC1_2_IRQHandler>
	...

08003e58 <__libc_init_array>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	4e0d      	ldr	r6, [pc, #52]	; (8003e90 <__libc_init_array+0x38>)
 8003e5c:	4c0d      	ldr	r4, [pc, #52]	; (8003e94 <__libc_init_array+0x3c>)
 8003e5e:	1ba4      	subs	r4, r4, r6
 8003e60:	10a4      	asrs	r4, r4, #2
 8003e62:	2500      	movs	r5, #0
 8003e64:	42a5      	cmp	r5, r4
 8003e66:	d109      	bne.n	8003e7c <__libc_init_array+0x24>
 8003e68:	4e0b      	ldr	r6, [pc, #44]	; (8003e98 <__libc_init_array+0x40>)
 8003e6a:	4c0c      	ldr	r4, [pc, #48]	; (8003e9c <__libc_init_array+0x44>)
 8003e6c:	f000 f820 	bl	8003eb0 <_init>
 8003e70:	1ba4      	subs	r4, r4, r6
 8003e72:	10a4      	asrs	r4, r4, #2
 8003e74:	2500      	movs	r5, #0
 8003e76:	42a5      	cmp	r5, r4
 8003e78:	d105      	bne.n	8003e86 <__libc_init_array+0x2e>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e80:	4798      	blx	r3
 8003e82:	3501      	adds	r5, #1
 8003e84:	e7ee      	b.n	8003e64 <__libc_init_array+0xc>
 8003e86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e8a:	4798      	blx	r3
 8003e8c:	3501      	adds	r5, #1
 8003e8e:	e7f2      	b.n	8003e76 <__libc_init_array+0x1e>
 8003e90:	08003ff4 	.word	0x08003ff4
 8003e94:	08003ff4 	.word	0x08003ff4
 8003e98:	08003ff4 	.word	0x08003ff4
 8003e9c:	08003ff8 	.word	0x08003ff8

08003ea0 <memset>:
 8003ea0:	4402      	add	r2, r0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <_init>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	bf00      	nop
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr

08003ebc <_fini>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr
